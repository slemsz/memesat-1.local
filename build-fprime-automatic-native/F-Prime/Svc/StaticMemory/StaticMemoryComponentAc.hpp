// ======================================================================
// \title  StaticMemoryComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for StaticMemory component base class
// ======================================================================

#ifndef Svc_StaticMemoryComponentAc_HPP
#define Svc_StaticMemoryComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Buffer/BufferGetPortAc.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Os/Mutex.hpp"

namespace Svc {

  //! \class StaticMemoryComponentBase
  //! \brief Auto-generated base for StaticMemory component
  //!
  //! A component that provides statically allocated memory
  class StaticMemoryComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class StaticMemoryComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_BUFFERALLOCATE_INPUT_PORTS = 4,
        NUM_BUFFERDEALLOCATE_INPUT_PORTS = 4,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize StaticMemoryComponentBase object
      void init(
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return bufferAllocate[portNum]
      Fw::InputBufferGetPort* get_bufferAllocate_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return bufferDeallocate[portNum]
      Fw::InputBufferSendPort* get_bufferDeallocate_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct StaticMemoryComponentBase object
      StaticMemoryComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy StaticMemoryComponentBase object
      virtual ~StaticMemoryComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of bufferAllocate input ports
      //!
      //! \return The number of bufferAllocate input ports
      NATIVE_INT_TYPE getNum_bufferAllocate_InputPorts() const;

      //! Get the number of bufferDeallocate input ports
      //!
      //! \return The number of bufferDeallocate input ports
      NATIVE_INT_TYPE getNum_bufferDeallocate_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port bufferAllocate
      virtual Fw::Buffer bufferAllocate_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 size
      ) = 0;

      //! Handler for input port bufferDeallocate
      virtual void bufferDeallocate_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port bufferAllocate
      Fw::Buffer bufferAllocate_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 size
      );

      //! Handler base-class function for input port bufferDeallocate
      void bufferDeallocate_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Mutex operations for guarded ports
      //
      // You can override these operations to provide more sophisticated
      // synchronization
      // ----------------------------------------------------------------------

      //! Lock the guarded mutex
      virtual void lock();

      //! Unlock the guarded mutex
      virtual void unLock();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port bufferAllocate
      static Fw::Buffer m_p_bufferAllocate_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 size
      );

      //! Callback for port bufferDeallocate
      static void m_p_bufferDeallocate_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port bufferAllocate
      Fw::InputBufferGetPort m_bufferAllocate_InputPort[NUM_BUFFERALLOCATE_INPUT_PORTS];

      //! Input port bufferDeallocate
      Fw::InputBufferSendPort m_bufferDeallocate_InputPort[NUM_BUFFERDEALLOCATE_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Mutexes
      // ----------------------------------------------------------------------

      //! Mutex for guarded ports
      Os::Mutex m_guardedPortMutex;

  };

}

#endif

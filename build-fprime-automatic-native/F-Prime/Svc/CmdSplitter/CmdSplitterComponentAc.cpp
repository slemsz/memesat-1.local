// ======================================================================
// \title  CmdSplitterComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for CmdSplitter component base class
// ======================================================================

#include <cstdio>

#include "F-Prime/Svc/CmdSplitter/CmdSplitterComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void CmdSplitterComponentBase ::
    init(NATIVE_INT_TYPE instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port CmdBuff
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_CmdBuff_InputPorts());
      port++
    ) {
      this->m_CmdBuff_InputPort[port].init();
      this->m_CmdBuff_InputPort[port].addCallComp(
        this,
        m_p_CmdBuff_in
      );
      this->m_CmdBuff_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_CmdBuff_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_CmdBuff_InputPort[port].setObjName(portName);
#endif
    }

    // Connect input port seqCmdStatus
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_seqCmdStatus_InputPorts());
      port++
    ) {
      this->m_seqCmdStatus_InputPort[port].init();
      this->m_seqCmdStatus_InputPort[port].addCallComp(
        this,
        m_p_seqCmdStatus_in
      );
      this->m_seqCmdStatus_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_seqCmdStatus_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_seqCmdStatus_InputPort[port].setObjName(portName);
#endif
    }

    // Connect output port LocalCmd
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_LocalCmd_OutputPorts());
      port++
    ) {
      this->m_LocalCmd_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_LocalCmd_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_LocalCmd_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port RemoteCmd
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_RemoteCmd_OutputPorts());
      port++
    ) {
      this->m_RemoteCmd_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_RemoteCmd_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_RemoteCmd_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port forwardSeqCmdStatus
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_forwardSeqCmdStatus_OutputPorts());
      port++
    ) {
      this->m_forwardSeqCmdStatus_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_forwardSeqCmdStatus_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_forwardSeqCmdStatus_OutputPort[port].setObjName(portName);
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputComPort* CmdSplitterComponentBase ::
    get_CmdBuff_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_CmdBuff_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_CmdBuff_InputPort[portNum];
  }

  Fw::InputCmdResponsePort* CmdSplitterComponentBase ::
    get_seqCmdStatus_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_seqCmdStatus_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_seqCmdStatus_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void CmdSplitterComponentBase ::
    set_LocalCmd_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputComPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LocalCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LocalCmd_OutputPort[portNum].addCallPort(port);
  }

  void CmdSplitterComponentBase ::
    set_RemoteCmd_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputComPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_RemoteCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_RemoteCmd_OutputPort[portNum].addCallPort(port);
  }

  void CmdSplitterComponentBase ::
    set_forwardSeqCmdStatus_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_forwardSeqCmdStatus_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_forwardSeqCmdStatus_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void CmdSplitterComponentBase ::
    set_LocalCmd_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LocalCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LocalCmd_OutputPort[portNum].registerSerialPort(port);
  }

  void CmdSplitterComponentBase ::
    set_RemoteCmd_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_RemoteCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_RemoteCmd_OutputPort[portNum].registerSerialPort(port);
  }

  void CmdSplitterComponentBase ::
    set_forwardSeqCmdStatus_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_forwardSeqCmdStatus_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_forwardSeqCmdStatus_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  CmdSplitterComponentBase ::
    CmdSplitterComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  CmdSplitterComponentBase ::
    ~CmdSplitterComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE CmdSplitterComponentBase ::
    getNum_CmdBuff_InputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdBuff_InputPort));
  }

  NATIVE_INT_TYPE CmdSplitterComponentBase ::
    getNum_seqCmdStatus_InputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_seqCmdStatus_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE CmdSplitterComponentBase ::
    getNum_LocalCmd_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_LocalCmd_OutputPort));
  }

  NATIVE_INT_TYPE CmdSplitterComponentBase ::
    getNum_RemoteCmd_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_RemoteCmd_OutputPort));
  }

  NATIVE_INT_TYPE CmdSplitterComponentBase ::
    getNum_forwardSeqCmdStatus_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_forwardSeqCmdStatus_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool CmdSplitterComponentBase ::
    isConnected_LocalCmd_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_LocalCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_LocalCmd_OutputPort[portNum].isConnected();
  }

  bool CmdSplitterComponentBase ::
    isConnected_RemoteCmd_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_RemoteCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_RemoteCmd_OutputPort[portNum].isConnected();
  }

  bool CmdSplitterComponentBase ::
    isConnected_forwardSeqCmdStatus_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_forwardSeqCmdStatus_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_forwardSeqCmdStatus_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void CmdSplitterComponentBase ::
    CmdBuff_handlerBase(
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_CmdBuff_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Down call to pure virtual handler method implemented in Impl class
    this->CmdBuff_handler(
      portNum,
      data,
      context
    );
  }

  void CmdSplitterComponentBase ::
    seqCmdStatus_handlerBase(
        NATIVE_INT_TYPE portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_seqCmdStatus_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Down call to pure virtual handler method implemented in Impl class
    this->seqCmdStatus_handler(
      portNum,
      opCode,
      cmdSeq,
      response
    );
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void CmdSplitterComponentBase ::
    LocalCmd_out(
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LocalCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_LocalCmd_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void CmdSplitterComponentBase ::
    RemoteCmd_out(
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(
      portNum < this->getNum_RemoteCmd_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_RemoteCmd_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void CmdSplitterComponentBase ::
    forwardSeqCmdStatus_out(
        NATIVE_INT_TYPE portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    FW_ASSERT(
      portNum < this->getNum_forwardSeqCmdStatus_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_forwardSeqCmdStatus_OutputPort[portNum].invoke(
      opCode,
      cmdSeq,
      response
    );
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void CmdSplitterComponentBase ::
    m_p_CmdBuff_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    CmdSplitterComponentBase* compPtr = static_cast<CmdSplitterComponentBase*>(callComp);
    compPtr->CmdBuff_handlerBase(
      portNum,
      data,
      context
    );
  }

  void CmdSplitterComponentBase ::
    m_p_seqCmdStatus_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    FW_ASSERT(callComp);
    CmdSplitterComponentBase* compPtr = static_cast<CmdSplitterComponentBase*>(callComp);
    compPtr->seqCmdStatus_handlerBase(
      portNum,
      opCode,
      cmdSeq,
      response
    );
  }

}

// ======================================================================
// \title  LinuxSpiDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for LinuxSpiDriver component base class
// ======================================================================

#ifndef Drv_LinuxSpiDriverComponentAc_HPP
#define Drv_LinuxSpiDriverComponentAc_HPP

#include "Drv/SpiDriverPorts/SpiReadWritePortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"

namespace Drv {

  //! \class LinuxSpiDriverComponentBase
  //! \brief Auto-generated base for LinuxSpiDriver component
  class LinuxSpiDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class LinuxSpiDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_SPIREADWRITE_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_LOG_OUTPUT_PORTS = 1,
        NUM_LOGTEXT_OUTPUT_PORTS = 1,
        NUM_TIME_OUTPUT_PORTS = 1,
        NUM_TLM_OUTPUT_PORTS = 1,
      };

      //! Event IDs
      enum {
        EVENTID_SPI_OPENERROR = 0x0, //!< SPI open error
        EVENTID_SPI_CONFIGERROR = 0x1, //!< SPI config error
        EVENTID_SPI_WRITEERROR = 0x2, //!< SPI write error
        EVENTID_SPI_PORTOPENED = 0x4, //!< SPI open notification
      };

      //! Event throttle values: sets initial value of countdown variables
      enum {
        EVENTID_SPI_WRITEERROR_THROTTLE = 5, //!< Throttle reset count for SPI_WriteError
      };

      //! Channel IDs
      enum {
        CHANNELID_SPI_BYTES = 0x0, //!< Channel ID for SPI_Bytes
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize LinuxSpiDriverComponentBase object
      void init(
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return SpiReadWrite[portNum]
      Drv::InputSpiReadWritePort* get_SpiReadWrite_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to Log[portNum]
      void set_Log_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to LogText[portNum]
      void set_LogText_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to Time[portNum]
      void set_Time_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to Tlm[portNum]
      void set_Tlm_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to Log[portNum]
      void set_Log_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to LogText[portNum]
      void set_LogText_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to Time[portNum]
      void set_Time_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to Tlm[portNum]
      void set_Tlm_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct LinuxSpiDriverComponentBase object
      LinuxSpiDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy LinuxSpiDriverComponentBase object
      virtual ~LinuxSpiDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of SpiReadWrite input ports
      //!
      //! \return The number of SpiReadWrite input ports
      NATIVE_INT_TYPE getNum_SpiReadWrite_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of Log output ports
      //!
      //! \return The number of Log output ports
      NATIVE_INT_TYPE getNum_Log_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of LogText output ports
      //!
      //! \return The number of LogText output ports
      NATIVE_INT_TYPE getNum_LogText_OutputPorts() const;

#endif

      //! Get the number of Time output ports
      //!
      //! \return The number of Time output ports
      NATIVE_INT_TYPE getNum_Time_OutputPorts() const;

      //! Get the number of Tlm output ports
      //!
      //! \return The number of Tlm output ports
      NATIVE_INT_TYPE getNum_Tlm_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port Log is connected
      //!
      //! \return Whether port Log is connected
      bool isConnected_Log_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port LogText is connected
      //!
      //! \return Whether port LogText is connected
      bool isConnected_LogText_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

#endif

      //! Check whether port Time is connected
      //!
      //! \return Whether port Time is connected
      bool isConnected_Time_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port Tlm is connected
      //!
      //! \return Whether port Tlm is connected
      bool isConnected_Tlm_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port SpiReadWrite
      virtual void SpiReadWrite_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& writeBuffer,
          Fw::Buffer& readBuffer
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port SpiReadWrite
      void SpiReadWrite_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& writeBuffer,
          Fw::Buffer& readBuffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event SPI_OpenError
      //!
      //! SPI open error
      void log_WARNING_HI_SPI_OpenError(
          I32 device, //!< The device
          I32 select, //!< The chip select
          I32 error //!< The error code
      );

      //! Log event SPI_ConfigError
      //!
      //! SPI config error
      void log_WARNING_HI_SPI_ConfigError(
          I32 device, //!< The device
          I32 select, //!< The chip select
          I32 error //!< The error code
      );

      //! Log event SPI_WriteError
      //!
      //! SPI write error
      void log_WARNING_HI_SPI_WriteError(
          I32 device, //!< The device
          I32 select, //!< The chip select
          I32 error //!< The error code
      );

      //! Log event SPI_PortOpened
      //!
      //! SPI open notification
      void log_ACTIVITY_HI_SPI_PortOpened(
          I32 device, //!< The device
          I32 select //!< The chip select
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event throttle reset functions
      // ----------------------------------------------------------------------

      //! Reset throttle value for SPI_WriteError
      void log_WARNING_HI_SPI_WriteError_ThrottleClear();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel SPI_Bytes
      //!
      //! Bytes Sent/Received
      void tlmWrite_SPI_Bytes(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port SpiReadWrite
      static void m_p_SpiReadWrite_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& writeBuffer,
          Fw::Buffer& readBuffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port SpiReadWrite
      Drv::InputSpiReadWritePort m_SpiReadWrite_InputPort[NUM_SPIREADWRITE_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port Log
      Fw::OutputLogPort m_Log_OutputPort[NUM_LOG_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port LogText
      Fw::OutputLogTextPort m_LogText_OutputPort[NUM_LOGTEXT_OUTPUT_PORTS];

#endif

      //! Output port Time
      Fw::OutputTimePort m_Time_OutputPort[NUM_TIME_OUTPUT_PORTS];

      //! Output port Tlm
      Fw::OutputTlmPort m_Tlm_OutputPort[NUM_TLM_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Counter values for event throttling
      // ----------------------------------------------------------------------

      //! Throttle for SPI_WriteError
      NATIVE_UINT_TYPE m_SPI_WriteErrorThrottle;

  };

}

#endif

// ======================================================================
// \title  GroundInterfaceComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for GroundInterface component base class
// ======================================================================

#include <cstdio>

#include "F-Prime/Svc/GroundInterface/GroundInterfaceComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    init(NATIVE_INT_TYPE instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port downlinkPort
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_downlinkPort_InputPorts());
      port++
    ) {
      this->m_downlinkPort_InputPort[port].init();
      this->m_downlinkPort_InputPort[port].addCallComp(
        this,
        m_p_downlinkPort_in
      );
      this->m_downlinkPort_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_downlinkPort_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_downlinkPort_InputPort[port].setObjName(portName);
#endif
    }

    // Connect input port fileDownlinkBufferSendIn
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_fileDownlinkBufferSendIn_InputPorts());
      port++
    ) {
      this->m_fileDownlinkBufferSendIn_InputPort[port].init();
      this->m_fileDownlinkBufferSendIn_InputPort[port].addCallComp(
        this,
        m_p_fileDownlinkBufferSendIn_in
      );
      this->m_fileDownlinkBufferSendIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_fileDownlinkBufferSendIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_fileDownlinkBufferSendIn_InputPort[port].setObjName(portName);
#endif
    }

    // Connect input port readCallback
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_readCallback_InputPorts());
      port++
    ) {
      this->m_readCallback_InputPort[port].init();
      this->m_readCallback_InputPort[port].addCallComp(
        this,
        m_p_readCallback_in
      );
      this->m_readCallback_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_readCallback_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_readCallback_InputPort[port].setObjName(portName);
#endif
    }

    // Connect input port schedIn
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_schedIn_InputPorts());
      port++
    ) {
      this->m_schedIn_InputPort[port].init();
      this->m_schedIn_InputPort[port].addCallComp(
        this,
        m_p_schedIn_in
      );
      this->m_schedIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_schedIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_schedIn_InputPort[port].setObjName(portName);
#endif
    }

    // Connect output port Log
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_Log_OutputPorts());
      port++
    ) {
      this->m_Log_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_Log_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_Log_OutputPort[port].setObjName(portName);
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port LogText
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_LogText_OutputPorts());
      port++
    ) {
      this->m_LogText_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_LogText_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_LogText_OutputPort[port].setObjName(portName);
#endif
    }
#endif

    // Connect output port Time
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_Time_OutputPorts());
      port++
    ) {
      this->m_Time_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_Time_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_Time_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port fileDownlinkBufferSendOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_fileDownlinkBufferSendOut_OutputPorts());
      port++
    ) {
      this->m_fileDownlinkBufferSendOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_fileDownlinkBufferSendOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_fileDownlinkBufferSendOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port fileUplinkBufferGet
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_fileUplinkBufferGet_OutputPorts());
      port++
    ) {
      this->m_fileUplinkBufferGet_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_fileUplinkBufferGet_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_fileUplinkBufferGet_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port fileUplinkBufferSendOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_fileUplinkBufferSendOut_OutputPorts());
      port++
    ) {
      this->m_fileUplinkBufferSendOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_fileUplinkBufferSendOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_fileUplinkBufferSendOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port readPoll
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_readPoll_OutputPorts());
      port++
    ) {
      this->m_readPoll_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_readPoll_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_readPoll_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port uplinkPort
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_uplinkPort_OutputPorts());
      port++
    ) {
      this->m_uplinkPort_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_uplinkPort_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_uplinkPort_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port write
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_write_OutputPorts());
      port++
    ) {
      this->m_write_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_write_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_write_OutputPort[port].setObjName(portName);
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputComPort* GroundInterfaceComponentBase ::
    get_downlinkPort_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_downlinkPort_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_downlinkPort_InputPort[portNum];
  }

  Fw::InputBufferSendPort* GroundInterfaceComponentBase ::
    get_fileDownlinkBufferSendIn_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_fileDownlinkBufferSendIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_fileDownlinkBufferSendIn_InputPort[portNum];
  }

  Fw::InputBufferSendPort* GroundInterfaceComponentBase ::
    get_readCallback_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_readCallback_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_readCallback_InputPort[portNum];
  }

  Svc::InputSchedPort* GroundInterfaceComponentBase ::
    get_schedIn_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_schedIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_schedIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    set_Log_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Log_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void GroundInterfaceComponentBase ::
    set_LogText_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LogText_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].addCallPort(port);
  }

#endif

  void GroundInterfaceComponentBase ::
    set_Time_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    set_fileDownlinkBufferSendOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileDownlinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileDownlinkBufferSendOut_OutputPort[portNum].addCallPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_fileUplinkBufferGet_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputBufferGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferGet_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileUplinkBufferGet_OutputPort[portNum].addCallPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_fileUplinkBufferSendOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileUplinkBufferSendOut_OutputPort[portNum].addCallPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_readPoll_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_readPoll_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_readPoll_OutputPort[portNum].addCallPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_uplinkPort_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputComPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_uplinkPort_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_uplinkPort_OutputPort[portNum].addCallPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_write_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_write_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    set_Log_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Log_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void GroundInterfaceComponentBase ::
    set_LogText_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_LogText_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void GroundInterfaceComponentBase ::
    set_Time_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    set_fileDownlinkBufferSendOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileDownlinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileDownlinkBufferSendOut_OutputPort[portNum].registerSerialPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_fileUplinkBufferSendOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileUplinkBufferSendOut_OutputPort[portNum].registerSerialPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_readPoll_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_readPoll_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_readPoll_OutputPort[portNum].registerSerialPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_uplinkPort_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_uplinkPort_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_uplinkPort_OutputPort[portNum].registerSerialPort(port);
  }

  void GroundInterfaceComponentBase ::
    set_write_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_write_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  GroundInterfaceComponentBase ::
    GroundInterfaceComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  GroundInterfaceComponentBase ::
    ~GroundInterfaceComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_downlinkPort_InputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_downlinkPort_InputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_fileDownlinkBufferSendIn_InputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_fileDownlinkBufferSendIn_InputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_readCallback_InputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_readCallback_InputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_schedIn_InputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_schedIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_Log_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_Log_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_LogText_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_LogText_OutputPort));
  }

#endif

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_Time_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_Time_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_fileDownlinkBufferSendOut_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_fileDownlinkBufferSendOut_OutputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_fileUplinkBufferGet_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_fileUplinkBufferGet_OutputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_fileUplinkBufferSendOut_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_fileUplinkBufferSendOut_OutputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_readPoll_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_readPoll_OutputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_uplinkPort_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_uplinkPort_OutputPort));
  }

  NATIVE_INT_TYPE GroundInterfaceComponentBase ::
    getNum_write_OutputPorts() const
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_write_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool GroundInterfaceComponentBase ::
    isConnected_Log_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Log_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Log_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool GroundInterfaceComponentBase ::
    isConnected_LogText_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_LogText_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_LogText_OutputPort[portNum].isConnected();
  }

#endif

  bool GroundInterfaceComponentBase ::
    isConnected_Time_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_Time_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Time_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool GroundInterfaceComponentBase ::
    isConnected_fileDownlinkBufferSendOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_fileDownlinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_fileDownlinkBufferSendOut_OutputPort[portNum].isConnected();
  }

  bool GroundInterfaceComponentBase ::
    isConnected_fileUplinkBufferGet_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferGet_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_fileUplinkBufferGet_OutputPort[portNum].isConnected();
  }

  bool GroundInterfaceComponentBase ::
    isConnected_fileUplinkBufferSendOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_fileUplinkBufferSendOut_OutputPort[portNum].isConnected();
  }

  bool GroundInterfaceComponentBase ::
    isConnected_readPoll_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_readPoll_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_readPoll_OutputPort[portNum].isConnected();
  }

  bool GroundInterfaceComponentBase ::
    isConnected_uplinkPort_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_uplinkPort_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_uplinkPort_OutputPort[portNum].isConnected();
  }

  bool GroundInterfaceComponentBase ::
    isConnected_write_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_write_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    downlinkPort_handlerBase(
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_downlinkPort_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Down call to pure virtual handler method implemented in Impl class
    this->downlinkPort_handler(
      portNum,
      data,
      context
    );

    // Unlock guard mutex
    this->unLock();
  }

  void GroundInterfaceComponentBase ::
    fileDownlinkBufferSendIn_handlerBase(
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_fileDownlinkBufferSendIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Down call to pure virtual handler method implemented in Impl class
    this->fileDownlinkBufferSendIn_handler(
      portNum,
      fwBuffer
    );

    // Unlock guard mutex
    this->unLock();
  }

  void GroundInterfaceComponentBase ::
    readCallback_handlerBase(
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_readCallback_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Down call to pure virtual handler method implemented in Impl class
    this->readCallback_handler(
      portNum,
      fwBuffer
    );

    // Unlock guard mutex
    this->unLock();
  }

  void GroundInterfaceComponentBase ::
    schedIn_handlerBase(
        NATIVE_INT_TYPE portNum,
        NATIVE_UINT_TYPE context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_schedIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Down call to pure virtual handler method implemented in Impl class
    this->schedIn_handler(
      portNum,
      context
    );

    // Unlock guard mutex
    this->unLock();
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    fileDownlinkBufferSendOut_out(
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileDownlinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_fileDownlinkBufferSendOut_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  Fw::Buffer GroundInterfaceComponentBase ::
    fileUplinkBufferGet_out(
        NATIVE_INT_TYPE portNum,
        U32 size
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferGet_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_fileUplinkBufferGet_OutputPort[portNum].invoke(
      size
    );
  }

  void GroundInterfaceComponentBase ::
    fileUplinkBufferSendOut_out(
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_fileUplinkBufferSendOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_fileUplinkBufferSendOut_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void GroundInterfaceComponentBase ::
    readPoll_out(
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_readPoll_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_readPoll_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void GroundInterfaceComponentBase ::
    uplinkPort_out(
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(
      portNum < this->getNum_uplinkPort_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_uplinkPort_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void GroundInterfaceComponentBase ::
    write_out(
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_write_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    log_WARNING_HI_GroundInterfaceError()
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_GROUNDINTERFACEERROR;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;

#if FW_AMPCS_COMPATIBLE
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(0));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Ground interface encountered an error";
#else
      const char* _formatString =
        "%s: Ground interface encountered an error";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "GroundInterfaceError "
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time GroundInterfaceComponentBase ::
    getTime()
  {
    if (this->m_Time_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_Time_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void GroundInterfaceComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void GroundInterfaceComponentBase ::
    m_p_downlinkPort_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    GroundInterfaceComponentBase* compPtr = static_cast<GroundInterfaceComponentBase*>(callComp);
    compPtr->downlinkPort_handlerBase(
      portNum,
      data,
      context
    );
  }

  void GroundInterfaceComponentBase ::
    m_p_fileDownlinkBufferSendIn_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(callComp);
    GroundInterfaceComponentBase* compPtr = static_cast<GroundInterfaceComponentBase*>(callComp);
    compPtr->fileDownlinkBufferSendIn_handlerBase(
      portNum,
      fwBuffer
    );
  }

  void GroundInterfaceComponentBase ::
    m_p_readCallback_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(callComp);
    GroundInterfaceComponentBase* compPtr = static_cast<GroundInterfaceComponentBase*>(callComp);
    compPtr->readCallback_handlerBase(
      portNum,
      fwBuffer
    );
  }

  void GroundInterfaceComponentBase ::
    m_p_schedIn_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        NATIVE_UINT_TYPE context
    )
  {
    FW_ASSERT(callComp);
    GroundInterfaceComponentBase* compPtr = static_cast<GroundInterfaceComponentBase*>(callComp);
    compPtr->schedIn_handlerBase(
      portNum,
      context
    );
  }

}

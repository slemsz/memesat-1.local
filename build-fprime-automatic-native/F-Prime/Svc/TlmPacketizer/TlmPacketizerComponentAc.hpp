// ======================================================================
// \title  TlmPacketizerComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for TlmPacketizer component base class
// ======================================================================

#ifndef Svc_TlmPacketizerComponentAc_HPP
#define Svc_TlmPacketizerComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Com/ComPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Svc/Ping/PingPortAc.hpp"
#include "Svc/Sched/SchedPortAc.hpp"

namespace Svc {

  //! \class TlmPacketizerComponentBase
  //! \brief Auto-generated base for TlmPacketizer component
  //!
  //! A component for storing telemetry
  class TlmPacketizerComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class TlmPacketizerComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_RUN_INPUT_PORTS = 1,
        NUM_TLMRECV_INPUT_PORTS = 1,
        NUM_PINGIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGOUT_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_EVENTOUT_OUTPUT_PORTS = 1,
        NUM_TEXTEVENTOUT_OUTPUT_PORTS = 1,
        NUM_TIMEGETOUT_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_PKTSEND_OUTPUT_PORTS = 1,
        NUM_PINGOUT_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_SET_LEVEL = 0x0, //!< Set telemetry send level
        OPCODE_SEND_PKT = 0x1, //!< Force a packet to be sent
      };

      //! Event IDs
      enum {
        EVENTID_NOCHAN = 0x0, //!< Telemetry channel is not part of a telemetry packet.
        EVENTID_LEVELSET = 0x1, //!< Telemetry send level set
        EVENTID_MAXLEVELEXCEED = 0x2, //!< Telemetry send level set
        EVENTID_PACKETSENT = 0x3, //!< Packet manually sent
        EVENTID_PACKETNOTFOUND = 0x4, //!< Couldn't find the packet to send
      };

      //! Channel IDs
      enum {
        CHANNELID_SENDLEVEL = 0x0, //!< Channel ID for SendLevel
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize TlmPacketizerComponentBase object
      void init(
          NATIVE_INT_TYPE queueDepth, //!< The queue depth
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return Run[portNum]
      Svc::InputSchedPort* get_Run_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return TlmRecv[portNum]
      Fw::InputTlmPort* get_TlmRecv_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return pingIn[portNum]
      Svc::InputPingPort* get_pingIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to eventOut[portNum]
      void set_eventOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to textEventOut[portNum]
      void set_textEventOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to timeGetOut[portNum]
      void set_timeGetOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to PktSend[portNum]
      void set_PktSend_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputComPort* port //!< The input port
      );

      //! Connect port to pingOut[portNum]
      void set_pingOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Svc::InputPingPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to eventOut[portNum]
      void set_eventOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to textEventOut[portNum]
      void set_textEventOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to timeGetOut[portNum]
      void set_timeGetOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to PktSend[portNum]
      void set_PktSend_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to pingOut[portNum]
      void set_pingOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct TlmPacketizerComponentBase object
      TlmPacketizerComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy TlmPacketizerComponentBase object
      virtual ~TlmPacketizerComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      NATIVE_INT_TYPE getNum_cmdIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of Run input ports
      //!
      //! \return The number of Run input ports
      NATIVE_INT_TYPE getNum_Run_InputPorts() const;

      //! Get the number of TlmRecv input ports
      //!
      //! \return The number of TlmRecv input ports
      NATIVE_INT_TYPE getNum_TlmRecv_InputPorts() const;

      //! Get the number of pingIn input ports
      //!
      //! \return The number of pingIn input ports
      NATIVE_INT_TYPE getNum_pingIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegOut output ports
      //!
      //! \return The number of cmdRegOut output ports
      NATIVE_INT_TYPE getNum_cmdRegOut_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      NATIVE_INT_TYPE getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of eventOut output ports
      //!
      //! \return The number of eventOut output ports
      NATIVE_INT_TYPE getNum_eventOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of textEventOut output ports
      //!
      //! \return The number of textEventOut output ports
      NATIVE_INT_TYPE getNum_textEventOut_OutputPorts() const;

#endif

      //! Get the number of timeGetOut output ports
      //!
      //! \return The number of timeGetOut output ports
      NATIVE_INT_TYPE getNum_timeGetOut_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      NATIVE_INT_TYPE getNum_tlmOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of PktSend output ports
      //!
      //! \return The number of PktSend output ports
      NATIVE_INT_TYPE getNum_PktSend_OutputPorts() const;

      //! Get the number of pingOut output ports
      //!
      //! \return The number of pingOut output ports
      NATIVE_INT_TYPE getNum_pingOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegOut is connected
      //!
      //! \return Whether port cmdRegOut is connected
      bool isConnected_cmdRegOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port eventOut is connected
      //!
      //! \return Whether port eventOut is connected
      bool isConnected_eventOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port textEventOut is connected
      //!
      //! \return Whether port textEventOut is connected
      bool isConnected_textEventOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

#endif

      //! Check whether port timeGetOut is connected
      //!
      //! \return Whether port timeGetOut is connected
      bool isConnected_timeGetOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port PktSend is connected
      //!
      //! \return Whether port PktSend is connected
      bool isConnected_PktSend_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port pingOut is connected
      //!
      //! \return Whether port pingOut is connected
      bool isConnected_pingOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port Run
      virtual void Run_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          NATIVE_UINT_TYPE context //!< The call order
      ) = 0;

      //! Handler for input port TlmRecv
      virtual void TlmRecv_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      ) = 0;

      //! Handler for input port pingIn
      virtual void pingIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 key //!< Value to return to pinger
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port Run
      void Run_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          NATIVE_UINT_TYPE context //!< The call order
      );

      //! Handler base-class function for input port TlmRecv
      void TlmRecv_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      );

      //! Handler base-class function for input port pingIn
      void pingIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for typed async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port Run
      virtual void Run_preMsgHook(
          NATIVE_INT_TYPE portNum, //!< The port number
          NATIVE_UINT_TYPE context //!< The call order
      );

      //! Pre-message hook for async input port pingIn
      virtual void pingIn_preMsgHook(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port PktSend
      void PktSend_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      );

      //! Invoke output port pingOut
      void pingOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command SET_LEVEL
      //!
      //! Set telemetry send level
      virtual void SET_LEVEL_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U32 level //!< The I32 command argument
      ) = 0;

      //! Handler for command SEND_PKT
      //!
      //! Force a packet to be sent
      virtual void SEND_PKT_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U32 id //!< The packet ID
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command SET_LEVEL
      //!
      //! Set telemetry send level
      void SET_LEVEL_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command SEND_PKT
      //!
      //! Force a packet to be sent
      void SEND_PKT_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for async commands
      //
      // Each of these functions is invoked just before processing the
      // corresponding command. By default they do nothing. You can
      // override them to provide specific pre-command behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for command SET_LEVEL
      virtual void SET_LEVEL_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command SEND_PKT
      virtual void SEND_PKT_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event NoChan
      //!
      //! Telemetry channel is not part of a telemetry packet.
      void log_WARNING_LO_NoChan(
          U32 Id //!< The telemetry ID
      );

      //! Log event LevelSet
      //!
      //! Telemetry send level set
      void log_ACTIVITY_HI_LevelSet(
          U32 id //!< The level
      );

      //! Log event MaxLevelExceed
      //!
      //! Telemetry send level set
      void log_WARNING_LO_MaxLevelExceed(
          U32 level, //!< The level
          U32 max //!< The max packet level
      );

      //! Log event PacketSent
      //!
      //! Packet manually sent
      void log_ACTIVITY_LO_PacketSent(
          U32 id //!< The packet ID
      );

      //! Log event PacketNotFound
      //!
      //! Couldn't find the packet to send
      void log_WARNING_LO_PacketNotFound(
          U32 id //!< The packet ID
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel SendLevel
      //!
      //! Telemetry send level
      void tlmWrite_SendLevel(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port Run
      static void m_p_Run_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          NATIVE_UINT_TYPE context //!< The call order
      );

      //! Callback for port TlmRecv
      static void m_p_TlmRecv_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      );

      //! Callback for port pingIn
      static void m_p_pingIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port Run
      Svc::InputSchedPort m_Run_InputPort[NUM_RUN_INPUT_PORTS];

      //! Input port TlmRecv
      Fw::InputTlmPort m_TlmRecv_InputPort[NUM_TLMRECV_INPUT_PORTS];

      //! Input port pingIn
      Svc::InputPingPort m_pingIn_InputPort[NUM_PINGIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegOut
      Fw::OutputCmdRegPort m_cmdRegOut_OutputPort[NUM_CMDREGOUT_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port eventOut
      Fw::OutputLogPort m_eventOut_OutputPort[NUM_EVENTOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port textEventOut
      Fw::OutputLogTextPort m_textEventOut_OutputPort[NUM_TEXTEVENTOUT_OUTPUT_PORTS];

#endif

      //! Output port timeGetOut
      Fw::OutputTimePort m_timeGetOut_OutputPort[NUM_TIMEGETOUT_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port PktSend
      Fw::OutputComPort m_PktSend_OutputPort[NUM_PKTSEND_OUTPUT_PORTS];

      //! Output port pingOut
      Svc::OutputPingPort m_pingOut_OutputPort[NUM_PINGOUT_OUTPUT_PORTS];

  };

}

#endif

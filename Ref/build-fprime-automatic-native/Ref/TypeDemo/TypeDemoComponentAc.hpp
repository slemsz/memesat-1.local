// ======================================================================
// \title  TypeDemoComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for TypeDemo component base class
// ======================================================================

#ifndef Ref_TypeDemoComponentAc_HPP
#define Ref_TypeDemoComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Prm/ParamValidEnumAc.hpp"
#include "Fw/Prm/PrmGetPortAc.hpp"
#include "Fw/Prm/PrmSetPortAc.hpp"
#include "Fw/Prm/PrmString.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Os/Mutex.hpp"
#include "Ref/TypeDemo/ChoiceEnumAc.hpp"
#include "Ref/TypeDemo/ChoicePairSerializableAc.hpp"
#include "Ref/TypeDemo/ChoiceSlurrySerializableAc.hpp"
#include "Ref/TypeDemo/FloatSetArrayAc.hpp"
#include "Ref/TypeDemo/ManyChoicesArrayAc.hpp"
#include "Ref/TypeDemo/ScalarStructSerializableAc.hpp"
#include "Ref/TypeDemo/TooManyChoicesArrayAc.hpp"

namespace Ref {

  //! \class TypeDemoComponentBase
  //! \brief Auto-generated base for TypeDemo component
  //!
  //! Component to demonstrate multiple type configurations
  class TypeDemoComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class TypeDemoComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGOUT_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_LOGOUT_OUTPUT_PORTS = 1,
        NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
        NUM_PRMGETOUT_OUTPUT_PORTS = 1,
        NUM_PRMSETOUT_OUTPUT_PORTS = 1,
        NUM_TIMECALLER_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_CHOICE = 0x0, //!< Single choice command
        OPCODE_CHOICE_PRM_SET = 0x1, //!< Opcode to set parameter CHOICE_PRM
        OPCODE_CHOICE_PRM_SAVE = 0x2, //!< Opcode to save parameter CHOICE_PRM
        OPCODE_CHOICES = 0x3, //!< Multiple choice command via Array
        OPCODE_CHOICES_WITH_FRIENDS = 0x4, //!< Multiple choice command via Array with a preceding and following argument
        OPCODE_CHOICES_PRM_SET = 0x5, //!< Opcode to set parameter CHOICES_PRM
        OPCODE_CHOICES_PRM_SAVE = 0x6, //!< Opcode to save parameter CHOICES_PRM
        OPCODE_EXTRA_CHOICES = 0x7, //!< Too many choice command via Array
        OPCODE_EXTRA_CHOICES_WITH_FRIENDS = 0x8, //!< Too many choices command via Array with a preceding and following argument
        OPCODE_EXTRA_CHOICES_PRM_SET = 0x9, //!< Opcode to set parameter EXTRA_CHOICES_PRM
        OPCODE_EXTRA_CHOICES_PRM_SAVE = 0xa, //!< Opcode to save parameter EXTRA_CHOICES_PRM
        OPCODE_CHOICE_PAIR = 0xb, //!< Multiple choice command via Structure
        OPCODE_CHOICE_PAIR_WITH_FRIENDS = 0xc, //!< Multiple choices command via Structure with a preceding and following argument
        OPCODE_CHOICE_PAIR_PRM_SET = 0xd, //!< Opcode to set parameter CHOICE_PAIR_PRM
        OPCODE_CHOICE_PAIR_PRM_SAVE = 0xe, //!< Opcode to save parameter CHOICE_PAIR_PRM
        OPCODE_GLUTTON_OF_CHOICE = 0xf, //!< Multiple choice command via Complex Structure
        OPCODE_GLUTTON_OF_CHOICE_WITH_FRIENDS = 0x10, //!< Multiple choices command via Complex Structure with a preceding and following argument
        OPCODE_GLUTTON_OF_CHOICE_PRM_SET = 0x11, //!< Opcode to set parameter GLUTTON_OF_CHOICE_PRM
        OPCODE_GLUTTON_OF_CHOICE_PRM_SAVE = 0x12, //!< Opcode to save parameter GLUTTON_OF_CHOICE_PRM
        OPCODE_DUMP_TYPED_PARAMETERS = 0x13, //!< Dump the typed parameters
        OPCODE_DUMP_FLOATS = 0x14, //!< Dump the float values
        OPCODE_SEND_SCALARS = 0x15, //!< Send scalars
      };

      //! Event IDs
      enum {
        EVENTID_CHOICEEV = 0x0, //!< Single choice event
        EVENTID_CHOICESEV = 0x1, //!< Multiple choice event via Array
        EVENTID_EXTRACHOICESEV = 0x2, //!< Too many choice event via Array
        EVENTID_CHOICEPAIREV = 0x3, //!< Multiple choice event via Structure
        EVENTID_CHOICESLURRYEV = 0x4, //!< Multiple choice event via Complex Structure
        EVENTID_CHOICEPRMEV = 0x5, //!< Single choice parameter event
        EVENTID_CHOICESPRMEV = 0x6, //!< Multiple choice parameter event via Array
        EVENTID_EXTRACHOICESPRMEV = 0x7, //!< Too many choice parameter event via Array
        EVENTID_CHOICEPAIRPRMEV = 0x8, //!< Multiple choice parameter event via Structure
        EVENTID_CHOICESLURRYPRMEV = 0x9, //!< Multiple choice parameter event via Complex Structure
        EVENTID_FLOATEV = 0xa, //!< A set of floats in an event
        EVENTID_SCALARSTRUCTEV = 0xb, //!< Event for scalar struct
      };

      //! Channel IDs
      enum {
        CHANNELID_CHOICECH = 0x0, //!< Channel ID for ChoiceCh
        CHANNELID_CHOICESCH = 0x1, //!< Channel ID for ChoicesCh
        CHANNELID_EXTRACHOICESCH = 0x2, //!< Channel ID for ExtraChoicesCh
        CHANNELID_CHOICEPAIRCH = 0x3, //!< Channel ID for ChoicePairCh
        CHANNELID_CHOICESLURRYCH = 0x4, //!< Channel ID for ChoiceSlurryCh
        CHANNELID_FLOAT1CH = 0x5, //!< Channel ID for Float1Ch
        CHANNELID_FLOAT2CH = 0x6, //!< Channel ID for Float2Ch
        CHANNELID_FLOAT3CH = 0x7, //!< Channel ID for Float3Ch
        CHANNELID_FLOATSET = 0x8, //!< Channel ID for FloatSet
      };

      //! Parameter IDs
      enum {
        PARAMID_CHOICE_PRM = 0x0, //!< Single enumeration parameter
        PARAMID_CHOICES_PRM = 0x1, //!< Multiple enumeration parameter via Array
        PARAMID_EXTRA_CHOICES_PRM = 0x2, //!< Too many enumeration parameter via Array
        PARAMID_CHOICE_PAIR_PRM = 0x3, //!< Multiple enumeration parameter via Structure
        PARAMID_GLUTTON_OF_CHOICE_PRM = 0x4, //!< Multiple enumeration parameter via Complex Structure
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize TypeDemoComponentBase object
      void init(
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to prmGetOut[portNum]
      void set_prmGetOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputPrmGetPort* port //!< The input port
      );

      //! Connect port to prmSetOut[portNum]
      void set_prmSetOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputPrmSetPort* port //!< The input port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to prmSetOut[portNum]
      void set_prmSetOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    public:

      // ----------------------------------------------------------------------
      // Parameter loading
      // ----------------------------------------------------------------------

      //! \brief Load the parameters from a parameter source
      //!
      //! Connect the parameter first
      void loadParameters();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct TypeDemoComponentBase object
      TypeDemoComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy TypeDemoComponentBase object
      virtual ~TypeDemoComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      NATIVE_INT_TYPE getNum_cmdIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegOut output ports
      //!
      //! \return The number of cmdRegOut output ports
      NATIVE_INT_TYPE getNum_cmdRegOut_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      NATIVE_INT_TYPE getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of logOut output ports
      //!
      //! \return The number of logOut output ports
      NATIVE_INT_TYPE getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of logTextOut output ports
      //!
      //! \return The number of logTextOut output ports
      NATIVE_INT_TYPE getNum_logTextOut_OutputPorts() const;

#endif

      //! Get the number of prmGetOut output ports
      //!
      //! \return The number of prmGetOut output ports
      NATIVE_INT_TYPE getNum_prmGetOut_OutputPorts() const;

      //! Get the number of prmSetOut output ports
      //!
      //! \return The number of prmSetOut output ports
      NATIVE_INT_TYPE getNum_prmSetOut_OutputPorts() const;

      //! Get the number of timeCaller output ports
      //!
      //! \return The number of timeCaller output ports
      NATIVE_INT_TYPE getNum_timeCaller_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      NATIVE_INT_TYPE getNum_tlmOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegOut is connected
      //!
      //! \return Whether port cmdRegOut is connected
      bool isConnected_cmdRegOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port logOut is connected
      //!
      //! \return Whether port logOut is connected
      bool isConnected_logOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port logTextOut is connected
      //!
      //! \return Whether port logTextOut is connected
      bool isConnected_logTextOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

#endif

      //! Check whether port prmGetOut is connected
      //!
      //! \return Whether port prmGetOut is connected
      bool isConnected_prmGetOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port prmSetOut is connected
      //!
      //! \return Whether port prmSetOut is connected
      bool isConnected_prmSetOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port timeCaller is connected
      //!
      //! \return Whether port timeCaller is connected
      bool isConnected_timeCaller_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command CHOICE
      //!
      //! Single choice command
      virtual void CHOICE_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::Choice choice //!< A single choice
      ) = 0;

      //! Handler for command CHOICES
      //!
      //! Multiple choice command via Array
      virtual void CHOICES_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::ManyChoices choices //!< A set of choices
      ) = 0;

      //! Handler for command CHOICES_WITH_FRIENDS
      //!
      //! Multiple choice command via Array with a preceding and following argument
      virtual void CHOICES_WITH_FRIENDS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U8 repeat, //!< Number of times to repeat the choices
          Ref::ManyChoices choices, //!< A set of choices
          U8 repeat_max //!< Limit to the number of repetitions
      ) = 0;

      //! Handler for command EXTRA_CHOICES
      //!
      //! Too many choice command via Array
      virtual void EXTRA_CHOICES_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::TooManyChoices choices //!< Way to many choices to make
      ) = 0;

      //! Handler for command EXTRA_CHOICES_WITH_FRIENDS
      //!
      //! Too many choices command via Array with a preceding and following argument
      virtual void EXTRA_CHOICES_WITH_FRIENDS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U8 repeat, //!< Number of times to repeat the choices
          Ref::TooManyChoices choices, //!< Way to many choices to make
          U8 repeat_max //!< Limit to the number of repetitions
      ) = 0;

      //! Handler for command CHOICE_PAIR
      //!
      //! Multiple choice command via Structure
      virtual void CHOICE_PAIR_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::ChoicePair choices //!< A pair of choices
      ) = 0;

      //! Handler for command CHOICE_PAIR_WITH_FRIENDS
      //!
      //! Multiple choices command via Structure with a preceding and following argument
      virtual void CHOICE_PAIR_WITH_FRIENDS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U8 repeat, //!< Number of times to repeat the choices
          Ref::ChoicePair choices, //!< A pair of choices
          U8 repeat_max //!< Limit to the number of repetitions
      ) = 0;

      //! Handler for command GLUTTON_OF_CHOICE
      //!
      //! Multiple choice command via Complex Structure
      virtual void GLUTTON_OF_CHOICE_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::ChoiceSlurry choices //!< A phenomenal amount of choice
      ) = 0;

      //! Handler for command GLUTTON_OF_CHOICE_WITH_FRIENDS
      //!
      //! Multiple choices command via Complex Structure with a preceding and following argument
      virtual void GLUTTON_OF_CHOICE_WITH_FRIENDS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U8 repeat, //!< Number of times to repeat the choices
          Ref::ChoiceSlurry choices, //!< A phenomenal amount of choice
          U8 repeat_max //!< Limit to the number of repetitions
      ) = 0;

      //! Handler for command DUMP_TYPED_PARAMETERS
      //!
      //! Dump the typed parameters
      virtual void DUMP_TYPED_PARAMETERS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

      //! Handler for command DUMP_FLOATS
      //!
      //! Dump the float values
      virtual void DUMP_FLOATS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

      //! Handler for command SEND_SCALARS
      //!
      //! Send scalars
      virtual void SEND_SCALARS_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::ScalarStruct scalar_input
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command CHOICE
      //!
      //! Single choice command
      void CHOICE_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command CHOICES
      //!
      //! Multiple choice command via Array
      void CHOICES_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command CHOICES_WITH_FRIENDS
      //!
      //! Multiple choice command via Array with a preceding and following argument
      void CHOICES_WITH_FRIENDS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command EXTRA_CHOICES
      //!
      //! Too many choice command via Array
      void EXTRA_CHOICES_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command EXTRA_CHOICES_WITH_FRIENDS
      //!
      //! Too many choices command via Array with a preceding and following argument
      void EXTRA_CHOICES_WITH_FRIENDS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command CHOICE_PAIR
      //!
      //! Multiple choice command via Structure
      void CHOICE_PAIR_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command CHOICE_PAIR_WITH_FRIENDS
      //!
      //! Multiple choices command via Structure with a preceding and following argument
      void CHOICE_PAIR_WITH_FRIENDS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command GLUTTON_OF_CHOICE
      //!
      //! Multiple choice command via Complex Structure
      void GLUTTON_OF_CHOICE_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command GLUTTON_OF_CHOICE_WITH_FRIENDS
      //!
      //! Multiple choices command via Complex Structure with a preceding and following argument
      void GLUTTON_OF_CHOICE_WITH_FRIENDS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command DUMP_TYPED_PARAMETERS
      //!
      //! Dump the typed parameters
      void DUMP_TYPED_PARAMETERS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command DUMP_FLOATS
      //!
      //! Dump the float values
      void DUMP_FLOATS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command SEND_SCALARS
      //!
      //! Send scalars
      void SEND_SCALARS_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event ChoiceEv
      //!
      //! Single choice event
      void log_ACTIVITY_HI_ChoiceEv(Ref::Choice choice);

      //! Log event ChoicesEv
      //!
      //! Multiple choice event via Array
      void log_ACTIVITY_HI_ChoicesEv(Ref::ManyChoices choices);

      //! Log event ExtraChoicesEv
      //!
      //! Too many choice event via Array
      void log_ACTIVITY_HI_ExtraChoicesEv(Ref::TooManyChoices choices);

      //! Log event ChoicePairEv
      //!
      //! Multiple choice event via Structure
      void log_ACTIVITY_HI_ChoicePairEv(Ref::ChoicePair choices);

      //! Log event ChoiceSlurryEv
      //!
      //! Multiple choice event via Complex Structure
      void log_ACTIVITY_HI_ChoiceSlurryEv(Ref::ChoiceSlurry choices);

      //! Log event ChoicePrmEv
      //!
      //! Single choice parameter event
      void log_ACTIVITY_HI_ChoicePrmEv(
          Ref::Choice choice,
          Fw::ParamValid validity
      );

      //! Log event ChoicesPrmEv
      //!
      //! Multiple choice parameter event via Array
      void log_ACTIVITY_HI_ChoicesPrmEv(
          Ref::ManyChoices choices,
          Fw::ParamValid validity
      );

      //! Log event ExtraChoicesPrmEv
      //!
      //! Too many choice parameter event via Array
      void log_ACTIVITY_HI_ExtraChoicesPrmEv(
          Ref::TooManyChoices choices,
          Fw::ParamValid validity
      );

      //! Log event ChoicePairPrmEv
      //!
      //! Multiple choice parameter event via Structure
      void log_ACTIVITY_HI_ChoicePairPrmEv(
          Ref::ChoicePair choices,
          Fw::ParamValid validity
      );

      //! Log event ChoiceSlurryPrmEv
      //!
      //! Multiple choice parameter event via Complex Structure
      void log_ACTIVITY_HI_ChoiceSlurryPrmEv(
          Ref::ChoiceSlurry choices,
          Fw::ParamValid validity
      );

      //! Log event FloatEv
      //!
      //! A set of floats in an event
      void log_ACTIVITY_HI_FloatEv(
          F32 float1,
          F32 float2,
          F32 float3,
          Ref::FloatSet floats
      );

      //! Log event ScalarStructEv
      //!
      //! Event for scalar struct
      void log_ACTIVITY_HI_ScalarStructEv(Ref::ScalarStruct scalar_argument);

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel ChoiceCh
      //!
      //! Single choice channel
      void tlmWrite_ChoiceCh(
          const Ref::Choice& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel ChoicesCh
      //!
      //! Multiple choice channel via Array
      void tlmWrite_ChoicesCh(
          const Ref::ManyChoices& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel ExtraChoicesCh
      //!
      //! Too many choice channel via Array
      void tlmWrite_ExtraChoicesCh(
          const Ref::TooManyChoices& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel ChoicePairCh
      //!
      //! Multiple choice channel via Structure
      void tlmWrite_ChoicePairCh(
          const Ref::ChoicePair& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel ChoiceSlurryCh
      //!
      //! Multiple choice channel via Complex Structure
      void tlmWrite_ChoiceSlurryCh(
          const Ref::ChoiceSlurry& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel Float1Ch
      //!
      //! Float output channel 1
      void tlmWrite_Float1Ch(
          F32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel Float2Ch
      //!
      //! Float output channel 2
      void tlmWrite_Float2Ch(
          F32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel Float3Ch
      //!
      //! Float output channel 3
      void tlmWrite_Float3Ch(
          F32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

      //! Write telemetry channel FloatSet
      //!
      //! Float set output channel
      void tlmWrite_FloatSet(
          const Ref::FloatSet& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Parameter update hook
      // ----------------------------------------------------------------------

      //! \brief Called whenever a parameter is updated
      //!
      //! This function does nothing by default. You may override it.
      virtual void parameterUpdated(
          FwPrmIdType id //!< The parameter ID
      );

      // ----------------------------------------------------------------------
      // Parameter load hook
      // ----------------------------------------------------------------------

      //! \brief Called whenever parameters are loaded
      //!
      //! This function does nothing by default. You may override it.
      virtual void parametersLoaded();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Parameter get functions
      // ----------------------------------------------------------------------

      //! Get parameter CHOICE_PRM
      //!
      //! \return The parameter value
      //!
      //! Single enumeration parameter
      Ref::Choice paramGet_CHOICE_PRM(
          Fw::ParamValid& valid //!< Whether the parameter is valid
      );

      //! Get parameter CHOICES_PRM
      //!
      //! \return The parameter value
      //!
      //! Multiple enumeration parameter via Array
      Ref::ManyChoices paramGet_CHOICES_PRM(
          Fw::ParamValid& valid //!< Whether the parameter is valid
      );

      //! Get parameter EXTRA_CHOICES_PRM
      //!
      //! \return The parameter value
      //!
      //! Too many enumeration parameter via Array
      Ref::ManyChoices paramGet_EXTRA_CHOICES_PRM(
          Fw::ParamValid& valid //!< Whether the parameter is valid
      );

      //! Get parameter CHOICE_PAIR_PRM
      //!
      //! \return The parameter value
      //!
      //! Multiple enumeration parameter via Structure
      Ref::ChoicePair paramGet_CHOICE_PAIR_PRM(
          Fw::ParamValid& valid //!< Whether the parameter is valid
      );

      //! Get parameter GLUTTON_OF_CHOICE_PRM
      //!
      //! \return The parameter value
      //!
      //! Multiple enumeration parameter via Complex Structure
      Ref::ChoiceSlurry paramGet_GLUTTON_OF_CHOICE_PRM(
          Fw::ParamValid& valid //!< Whether the parameter is valid
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter set functions
      // ----------------------------------------------------------------------

      //! Set parameter CHOICE_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSet_CHOICE_PRM(
          Fw::SerializeBufferBase& val //!< The serialization buffer
      );

      //! Set parameter CHOICES_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSet_CHOICES_PRM(
          Fw::SerializeBufferBase& val //!< The serialization buffer
      );

      //! Set parameter EXTRA_CHOICES_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSet_EXTRA_CHOICES_PRM(
          Fw::SerializeBufferBase& val //!< The serialization buffer
      );

      //! Set parameter CHOICE_PAIR_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSet_CHOICE_PAIR_PRM(
          Fw::SerializeBufferBase& val //!< The serialization buffer
      );

      //! Set parameter GLUTTON_OF_CHOICE_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSet_GLUTTON_OF_CHOICE_PRM(
          Fw::SerializeBufferBase& val //!< The serialization buffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter save functions
      // ----------------------------------------------------------------------

      //! Save parameter CHOICE_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSave_CHOICE_PRM();

      //! Save parameter CHOICES_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSave_CHOICES_PRM();

      //! Save parameter EXTRA_CHOICES_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSave_EXTRA_CHOICES_PRM();

      //! Save parameter CHOICE_PAIR_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSave_CHOICE_PAIR_PRM();

      //! Save parameter GLUTTON_OF_CHOICE_PRM
      //!
      //! \return The command response
      Fw::CmdResponse paramSave_GLUTTON_OF_CHOICE_PRM();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegOut
      Fw::OutputCmdRegPort m_cmdRegOut_OutputPort[NUM_CMDREGOUT_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port logOut
      Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port logTextOut
      Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

      //! Output port prmGetOut
      Fw::OutputPrmGetPort m_prmGetOut_OutputPort[NUM_PRMGETOUT_OUTPUT_PORTS];

      //! Output port prmSetOut
      Fw::OutputPrmSetPort m_prmSetOut_OutputPort[NUM_PRMSETOUT_OUTPUT_PORTS];

      //! Output port timeCaller
      Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter validity flags
      // ----------------------------------------------------------------------

      //! True if CHOICE_PRM was successfully received
      Fw::ParamValid m_param_CHOICE_PRM_valid;

      //! True if CHOICES_PRM was successfully received
      Fw::ParamValid m_param_CHOICES_PRM_valid;

      //! True if EXTRA_CHOICES_PRM was successfully received
      Fw::ParamValid m_param_EXTRA_CHOICES_PRM_valid;

      //! True if CHOICE_PAIR_PRM was successfully received
      Fw::ParamValid m_param_CHOICE_PAIR_PRM_valid;

      //! True if GLUTTON_OF_CHOICE_PRM was successfully received
      Fw::ParamValid m_param_GLUTTON_OF_CHOICE_PRM_valid;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter variables
      // ----------------------------------------------------------------------

      //! Parameter CHOICE_PRM
      //!
      //! Single enumeration parameter
      Ref::Choice m_CHOICE_PRM;

      //! Parameter CHOICES_PRM
      //!
      //! Multiple enumeration parameter via Array
      Ref::ManyChoices m_CHOICES_PRM;

      //! Parameter EXTRA_CHOICES_PRM
      //!
      //! Too many enumeration parameter via Array
      Ref::ManyChoices m_EXTRA_CHOICES_PRM;

      //! Parameter CHOICE_PAIR_PRM
      //!
      //! Multiple enumeration parameter via Structure
      Ref::ChoicePair m_CHOICE_PAIR_PRM;

      //! Parameter GLUTTON_OF_CHOICE_PRM
      //!
      //! Multiple enumeration parameter via Complex Structure
      Ref::ChoiceSlurry m_GLUTTON_OF_CHOICE_PRM;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Mutexes
      // ----------------------------------------------------------------------

      //! Mutex for locking parameters during sets and saves
      Os::Mutex m_paramLock;

  };

}

#endif

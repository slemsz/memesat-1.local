// ======================================================================
// \title  ActiveTextLoggerComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ActiveTextLogger component base class
// ======================================================================

#ifndef Svc_ActiveTextLoggerComponentAc_HPP
#define Svc_ActiveTextLoggerComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Types/InternalInterfaceString.hpp"

namespace Svc {

  //! \class ActiveTextLoggerComponentBase
  //! \brief Auto-generated base for ActiveTextLogger component
  //!
  //! A component for printing text logs to the console and optionally a file
  class ActiveTextLoggerComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class ActiveTextLoggerComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_TEXTLOGGER_INPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize ActiveTextLoggerComponentBase object
      void init(
          NATIVE_INT_TYPE queueDepth, //!< The queue depth
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return TextLogger[portNum]
      Fw::InputLogTextPort* get_TextLogger_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct ActiveTextLoggerComponentBase object
      ActiveTextLoggerComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy ActiveTextLoggerComponentBase object
      virtual ~ActiveTextLoggerComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of TextLogger input ports
      //!
      //! \return The number of TextLogger input ports
      NATIVE_INT_TYPE getNum_TextLogger_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port TextLogger
      virtual void TextLogger_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::TextLogString& text //!< Text of log message
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port TextLogger
      void TextLogger_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::TextLogString& text //!< Text of log message
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Internal interface handlers
      // ----------------------------------------------------------------------

      //! Internal interface handler for TextQueue
      virtual void TextQueue_internalInterfaceHandler(
          const Fw::InternalInterfaceString& text //!< The text string
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Internal interface base-class functions
      // ----------------------------------------------------------------------

      //! Internal interface base-class function for TextQueue
      void TextQueue_internalInterfaceInvoke(
          const Fw::InternalInterfaceString& text //!< The text string
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port TextLogger
      static void m_p_TextLogger_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::TextLogString& text //!< Text of log message
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port TextLogger
      Fw::InputLogTextPort m_TextLogger_InputPort[NUM_TEXTLOGGER_INPUT_PORTS];

  };

}

#endif

// ======================================================================
// \title  SignalInfoSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SignalInfo struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"
#include "Ref/SignalGen/SignalInfoSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  SignalInfo ::
    SignalInfo() :
      Serializable(),
      type(Ref::SignalType::TRIANGLE),
      history(Ref::SignalSet(0.0f, 0.0f, 0.0f, 0.0f)),
      pairHistory(Ref::SignalPairSet(Ref::SignalPair(0.0f, 0.0f), Ref::SignalPair(0.0f, 0.0f), Ref::SignalPair(0.0f, 0.0f), Ref::SignalPair(0.0f, 0.0f)))
  {

  }

  SignalInfo ::
    SignalInfo(
        Ref::SignalType::T type,
        const Ref::SignalSet& history,
        const Ref::SignalPairSet& pairHistory
    ) :
      Serializable(),
      type(type),
      history(history),
      pairHistory(pairHistory)
  {

  }

  SignalInfo ::
    SignalInfo(const SignalInfo& obj) :
      Serializable(),
      type(obj.type),
      history(obj.history),
      pairHistory(obj.pairHistory)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  SignalInfo& SignalInfo ::
    operator=(const SignalInfo& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.type, obj.history, obj.pairHistory);
    return *this;
  }

  bool SignalInfo ::
    operator==(const SignalInfo& obj) const
  {
    return (
      (this->type == obj.type) &&
      (this->history == obj.history) &&
      (this->pairHistory == obj.pairHistory)
    );
  }

  bool SignalInfo ::
    operator!=(const SignalInfo& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const SignalInfo& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus SignalInfo ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->type);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->history);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->pairHistory);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus SignalInfo ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->type);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->history);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->pairHistory);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

  void SignalInfo ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "type = %s, "
      "history = %s, "
      "pairHistory = %s"
      " )";

    // Declare strings to hold any serializable toString() arguments
    Fw::String typeStr;
    Fw::String historyStr;
    Fw::String pairHistoryStr;

    // Call toString for arrays and serializable types
    this->type.toString(typeStr);
    this->history.toString(historyStr);
    this->pairHistory.toString(pairHistoryStr);

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      typeStr.toChar(),
      historyStr.toChar(),
      pairHistoryStr.toChar()
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void SignalInfo ::
    set(
        Ref::SignalType::T type,
        const Ref::SignalSet& history,
        const Ref::SignalPairSet& pairHistory
    )
  {
    this->type = type;
    this->history = history;
    this->pairHistory = pairHistory;
  }

  void SignalInfo ::
    settype(Ref::SignalType::T type)
  {
    this->type = type;
  }

  void SignalInfo ::
    sethistory(const Ref::SignalSet& history)
  {
    this->history = history;
  }

  void SignalInfo ::
    setpairHistory(const Ref::SignalPairSet& pairHistory)
  {
    this->pairHistory = pairHistory;
  }

}

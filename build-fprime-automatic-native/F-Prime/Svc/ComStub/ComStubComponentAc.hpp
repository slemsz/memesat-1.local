// ======================================================================
// \title  ComStubComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ComStub component base class
// ======================================================================

#ifndef Svc_ComStubComponentAc_HPP
#define Svc_ComStubComponentAc_HPP

#include "Drv/ByteStreamDriverModel/ByteStreamReadyPortAc.hpp"
#include "Drv/ByteStreamDriverModel/ByteStreamRecvPortAc.hpp"
#include "Drv/ByteStreamDriverModel/ByteStreamSendPortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Ports/SuccessCondition/SuccessConditionPortAc.hpp"

namespace Svc {

  //! \class ComStubComponentBase
  //! \brief Auto-generated base for ComStub component
  //!
  //! Communication adapter interface implementing communication adapter interface via a Drv.ByteStreamDriverModel.
  class ComStubComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class ComStubComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_COMDATAIN_INPUT_PORTS = 1,
        NUM_DRVCONNECTED_INPUT_PORTS = 1,
        NUM_DRVDATAIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_COMDATAOUT_OUTPUT_PORTS = 1,
        NUM_COMSTATUS_OUTPUT_PORTS = 1,
        NUM_DRVDATAOUT_OUTPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize ComStubComponentBase object
      void init(
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return comDataIn[portNum]
      Drv::InputByteStreamSendPort* get_comDataIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return drvConnected[portNum]
      Drv::InputByteStreamReadyPort* get_drvConnected_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return drvDataIn[portNum]
      Drv::InputByteStreamRecvPort* get_drvDataIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to comDataOut[portNum]
      void set_comDataOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Drv::InputByteStreamRecvPort* port //!< The input port
      );

      //! Connect port to comStatus[portNum]
      void set_comStatus_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSuccessConditionPort* port //!< The input port
      );

      //! Connect port to drvDataOut[portNum]
      void set_drvDataOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Drv::InputByteStreamSendPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to comDataOut[portNum]
      void set_comDataOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to comStatus[portNum]
      void set_comStatus_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct ComStubComponentBase object
      ComStubComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy ComStubComponentBase object
      virtual ~ComStubComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of comDataIn input ports
      //!
      //! \return The number of comDataIn input ports
      NATIVE_INT_TYPE getNum_comDataIn_InputPorts() const;

      //! Get the number of drvConnected input ports
      //!
      //! \return The number of drvConnected input ports
      NATIVE_INT_TYPE getNum_drvConnected_InputPorts() const;

      //! Get the number of drvDataIn input ports
      //!
      //! \return The number of drvDataIn input ports
      NATIVE_INT_TYPE getNum_drvDataIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of comDataOut output ports
      //!
      //! \return The number of comDataOut output ports
      NATIVE_INT_TYPE getNum_comDataOut_OutputPorts() const;

      //! Get the number of comStatus output ports
      //!
      //! \return The number of comStatus output ports
      NATIVE_INT_TYPE getNum_comStatus_OutputPorts() const;

      //! Get the number of drvDataOut output ports
      //!
      //! \return The number of drvDataOut output ports
      NATIVE_INT_TYPE getNum_drvDataOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port comDataOut is connected
      //!
      //! \return Whether port comDataOut is connected
      bool isConnected_comDataOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port comStatus is connected
      //!
      //! \return Whether port comStatus is connected
      bool isConnected_comStatus_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port drvDataOut is connected
      //!
      //! \return Whether port drvDataOut is connected
      bool isConnected_drvDataOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port comDataIn
      virtual Drv::SendStatus comDataIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& sendBuffer //!< Data to send
      ) = 0;

      //! Handler for input port drvConnected
      virtual void drvConnected_handler(
          NATIVE_INT_TYPE portNum //!< The port number
      ) = 0;

      //! Handler for input port drvDataIn
      virtual void drvDataIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& recvBuffer,
          const Drv::RecvStatus& recvStatus
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port comDataIn
      Drv::SendStatus comDataIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& sendBuffer //!< Data to send
      );

      //! Handler base-class function for input port drvConnected
      void drvConnected_handlerBase(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Handler base-class function for input port drvDataIn
      void drvDataIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& recvBuffer,
          const Drv::RecvStatus& recvStatus
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port comDataOut
      void comDataOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& recvBuffer,
          const Drv::RecvStatus& recvStatus
      );

      //! Invoke output port comStatus
      void comStatus_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Success& condition //!< Condition success/failure
      );

      //! Invoke output port drvDataOut
      Drv::SendStatus drvDataOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& sendBuffer //!< Data to send
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port comDataIn
      static Drv::SendStatus m_p_comDataIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& sendBuffer //!< Data to send
      );

      //! Callback for port drvConnected
      static void m_p_drvConnected_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Callback for port drvDataIn
      static void m_p_drvDataIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& recvBuffer,
          const Drv::RecvStatus& recvStatus
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port comDataIn
      Drv::InputByteStreamSendPort m_comDataIn_InputPort[NUM_COMDATAIN_INPUT_PORTS];

      //! Input port drvConnected
      Drv::InputByteStreamReadyPort m_drvConnected_InputPort[NUM_DRVCONNECTED_INPUT_PORTS];

      //! Input port drvDataIn
      Drv::InputByteStreamRecvPort m_drvDataIn_InputPort[NUM_DRVDATAIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port comDataOut
      Drv::OutputByteStreamRecvPort m_comDataOut_OutputPort[NUM_COMDATAOUT_OUTPUT_PORTS];

      //! Output port comStatus
      Fw::OutputSuccessConditionPort m_comStatus_OutputPort[NUM_COMSTATUS_OUTPUT_PORTS];

      //! Output port drvDataOut
      Drv::OutputByteStreamSendPort m_drvDataOut_OutputPort[NUM_DRVDATAOUT_OUTPUT_PORTS];

  };

}

#endif

<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
MathSenderComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="MathModule" name="MathSender" kind="active">

  <comment>
  Component for sending a math operation
  </comment>

  <import_enum_type>Types/MathOpEnumAi.xml</import_enum_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
  <import_port_type>Ports/MathResultPortAi.xml</import_port_type>
  <import_port_type>Ports/OpRequestPortAi.xml</import_port_type>

  <ports>
    <port name="cmdIn" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Command receive port
      </comment>
    </port>
    <port name="cmdRegOut" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Command registration port
      </comment>
    </port>
    <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Command response port
      </comment>
    </port>
    <port name="eventOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Event port
      </comment>
    </port>
    <port name="mathOpOut" data_type="MathModule::OpRequest" kind="output" max_number="1">
      <comment>
      Port for sending the operation request
      </comment>
    </port>
    <port name="mathResultIn" data_type="MathModule::MathResult" kind="async_input" max_number="1" full="assert">
      <comment>
      Port for receiving the result
      </comment>
    </port>
    <port name="textEventOut" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Text event port
      </comment>
    </port>
    <port name="timeGetOut" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      Time get port
      </comment>
    </port>
    <port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
      <comment>
      Telemetry port
      </comment>
    </port>
  </ports>

  <commands>
    <command kind="async" opcode="0x0" mnemonic="DO_MATH" full="assert">
      <comment>
      Do a math operation
      </comment>
      <args>
        <arg name="val1" type="F32">
          <comment>
          The first operand
          </comment>
        </arg>
        <arg name="op" type="MathModule::MathOp">
          <comment>
          The operation
          </comment>
        </arg>
        <arg name="val2" type="F32">
          <comment>
          The second operand
          </comment>
        </arg>
      </args>
    </command>
  </commands>

  <events>
    <event id="0x0" name="COMMAND_RECV" severity="ACTIVITY_LO" format_string="Math command received: %f %s %f">
      <comment>
      Math command received
      </comment>
      <args>
        <arg name="val1" type="F32">
          <comment>
          The first operand
          </comment>
        </arg>
        <arg name="op" type="MathModule::MathOp">
          <comment>
          The operation
          </comment>
        </arg>
        <arg name="val2" type="F32">
          <comment>
          The second operand
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x1" name="RESULT" severity="ACTIVITY_HI" format_string="Math result is %f">
      <comment>
      Received math result
      </comment>
      <args>
        <arg name="result" type="F32">
          <comment>
          The math result
          </comment>
        </arg>
      </args>
    </event>
  </events>

  <telemetry>
    <channel id="0x0" name="VAL1" data_type="F32" update="always">
      <comment>
      The first value
      </comment>
    </channel>
    <channel id="0x1" name="OP" data_type="MathModule::MathOp" update="always">
      <comment>
      The operation
      </comment>
    </channel>
    <channel id="0x2" name="VAL2" data_type="F32" update="always">
      <comment>
      The second value
      </comment>
    </channel>
    <channel id="0x3" name="RESULT" data_type="F32" update="always">
      <comment>
      The result
      </comment>
    </channel>
  </telemetry>

</component>

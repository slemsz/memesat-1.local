// ======================================================================
// \title  TypeDemoComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TypeDemo component base class
// ======================================================================

#include <cstdio>

#include "Fw/Types/Assert.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Ref/TypeDemo/TypeDemoComponentAc.hpp"

namespace Ref {

  namespace {
    // Get the max size by doing a union of the input and internal port serialization sizes
    union BuffUnion {

      BYTE cmdPortSize[Fw::InputCmdPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Max. message size = size of data + message id + port
          SERIALIZATION_SIZE =
            sizeof(BuffUnion) +
            sizeof(NATIVE_INT_TYPE) +
            sizeof(NATIVE_INT_TYPE)
        };

        NATIVE_UINT_TYPE getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    init(NATIVE_INT_TYPE instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port cmdIn
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_cmdIn_InputPorts());
      port++
    ) {
      this->m_cmdIn_InputPort[port].init();
      this->m_cmdIn_InputPort[port].addCallComp(
        this,
        m_p_cmdIn_in
      );
      this->m_cmdIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_cmdIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_cmdIn_InputPort[port].setObjName(portName);
#endif
    }

    // Connect output port cmdRegOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_cmdRegOut_OutputPorts());
      port++
    ) {
      this->m_cmdRegOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_cmdRegOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_cmdRegOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port cmdResponseOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_cmdResponseOut_OutputPorts());
      port++
    ) {
      this->m_cmdResponseOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_cmdResponseOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port logOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_logOut_OutputPorts());
      port++
    ) {
      this->m_logOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_logOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_logOut_OutputPort[port].setObjName(portName);
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port logTextOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_logTextOut_OutputPorts());
      port++
    ) {
      this->m_logTextOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_logTextOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_logTextOut_OutputPort[port].setObjName(portName);
#endif
    }
#endif

    // Connect output port prmGetOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_prmGetOut_OutputPorts());
      port++
    ) {
      this->m_prmGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_prmGetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_prmGetOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port prmSetOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_prmSetOut_OutputPorts());
      port++
    ) {
      this->m_prmSetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_prmSetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_prmSetOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port timeCaller
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_timeCaller_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port tlmOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_tlmOut_OutputPorts());
      port++
    ) {
      this->m_tlmOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_tlmOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_tlmOut_OutputPort[port].setObjName(portName);
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* TypeDemoComponentBase ::
    get_cmdIn_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_cmdIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect special input ports to special output ports
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    set_cmdRegOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
  }

  void TypeDemoComponentBase ::
    set_cmdResponseOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
  }

  void TypeDemoComponentBase ::
    set_logOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_logOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void TypeDemoComponentBase ::
    set_logTextOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_logTextOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
  }

#endif

  void TypeDemoComponentBase ::
    set_prmGetOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmGetOut_OutputPort[portNum].addCallPort(port);
  }

  void TypeDemoComponentBase ::
    set_prmSetOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].addCallPort(port);
  }

  void TypeDemoComponentBase ::
    set_timeCaller_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

  void TypeDemoComponentBase ::
    set_tlmOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_tlmOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    set_cmdRegOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].registerSerialPort(port);
  }

  void TypeDemoComponentBase ::
    set_cmdResponseOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].registerSerialPort(port);
  }

  void TypeDemoComponentBase ::
    set_logOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_logOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void TypeDemoComponentBase ::
    set_logTextOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_logTextOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void TypeDemoComponentBase ::
    set_prmSetOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].registerSerialPort(port);
  }

  void TypeDemoComponentBase ::
    set_timeCaller_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

  void TypeDemoComponentBase ::
    set_tlmOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_tlmOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_tlmOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    regCommands()
  {
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE_PRM_SET
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE_PRM_SAVE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICES
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICES_WITH_FRIENDS
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICES_PRM_SET
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICES_PRM_SAVE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_EXTRA_CHOICES
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_EXTRA_CHOICES_WITH_FRIENDS
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_EXTRA_CHOICES_PRM_SET
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_EXTRA_CHOICES_PRM_SAVE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE_PAIR
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE_PAIR_WITH_FRIENDS
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE_PAIR_PRM_SET
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_CHOICE_PAIR_PRM_SAVE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_GLUTTON_OF_CHOICE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_GLUTTON_OF_CHOICE_WITH_FRIENDS
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_GLUTTON_OF_CHOICE_PRM_SET
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_GLUTTON_OF_CHOICE_PRM_SAVE
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_DUMP_TYPED_PARAMETERS
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_DUMP_FLOATS
    );
  }

  // ----------------------------------------------------------------------
  // Parameter loading
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    loadParameters()
  {
    Fw::ParamBuffer buff;
    Fw::SerializeStatus stat = Fw::FW_SERIALIZE_OK;
    FW_ASSERT(this->m_prmGetOut_OutputPort[0].isConnected());

    FwPrmIdType _id;

    _id = this->getIdBase() + PARAMID_CHOICE_PRM;

    // Get parameter CHOICE_PRM
    this->m_param_CHOICE_PRM_valid =
      this->m_prmGetOut_OutputPort[0].invoke(
        _id,
        buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_CHOICE_PRM_valid == Fw::ParamValid::VALID) {
      stat = buff.deserialize(this->m_CHOICE_PRM);
      if (stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_CHOICE_PRM_valid = Fw::ParamValid::INVALID;
      }
    }
    else {
      // No default
    }

    this->m_paramLock.unLock();

    _id = this->getIdBase() + PARAMID_CHOICES_PRM;

    // Get parameter CHOICES_PRM
    this->m_param_CHOICES_PRM_valid =
      this->m_prmGetOut_OutputPort[0].invoke(
        _id,
        buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_CHOICES_PRM_valid == Fw::ParamValid::VALID) {
      stat = buff.deserialize(this->m_CHOICES_PRM);
      if (stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_CHOICES_PRM_valid = Fw::ParamValid::INVALID;
      }
    }
    else {
      // No default
    }

    this->m_paramLock.unLock();

    _id = this->getIdBase() + PARAMID_EXTRA_CHOICES_PRM;

    // Get parameter EXTRA_CHOICES_PRM
    this->m_param_EXTRA_CHOICES_PRM_valid =
      this->m_prmGetOut_OutputPort[0].invoke(
        _id,
        buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_EXTRA_CHOICES_PRM_valid == Fw::ParamValid::VALID) {
      stat = buff.deserialize(this->m_EXTRA_CHOICES_PRM);
      if (stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_EXTRA_CHOICES_PRM_valid = Fw::ParamValid::INVALID;
      }
    }
    else {
      // No default
    }

    this->m_paramLock.unLock();

    _id = this->getIdBase() + PARAMID_CHOICE_PAIR_PRM;

    // Get parameter CHOICE_PAIR_PRM
    this->m_param_CHOICE_PAIR_PRM_valid =
      this->m_prmGetOut_OutputPort[0].invoke(
        _id,
        buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_CHOICE_PAIR_PRM_valid == Fw::ParamValid::VALID) {
      stat = buff.deserialize(this->m_CHOICE_PAIR_PRM);
      if (stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_CHOICE_PAIR_PRM_valid = Fw::ParamValid::INVALID;
      }
    }
    else {
      // No default
    }

    this->m_paramLock.unLock();

    _id = this->getIdBase() + PARAMID_GLUTTON_OF_CHOICE_PRM;

    // Get parameter GLUTTON_OF_CHOICE_PRM
    this->m_param_GLUTTON_OF_CHOICE_PRM_valid =
      this->m_prmGetOut_OutputPort[0].invoke(
        _id,
        buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_GLUTTON_OF_CHOICE_PRM_valid == Fw::ParamValid::VALID) {
      stat = buff.deserialize(this->m_GLUTTON_OF_CHOICE_PRM);
      if (stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_GLUTTON_OF_CHOICE_PRM_valid = Fw::ParamValid::INVALID;
      }
    }
    else {
      // No default
    }

    this->m_paramLock.unLock();

    // Call notifier
    this->parametersLoaded();
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  TypeDemoComponentBase ::
    TypeDemoComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {
    this->m_param_CHOICE_PRM_valid = Fw::ParamValid::UNINIT;
    this->m_param_CHOICES_PRM_valid = Fw::ParamValid::UNINIT;
    this->m_param_EXTRA_CHOICES_PRM_valid = Fw::ParamValid::UNINIT;
    this->m_param_CHOICE_PAIR_PRM_valid = Fw::ParamValid::UNINIT;
    this->m_param_GLUTTON_OF_CHOICE_PRM_valid = Fw::ParamValid::UNINIT;
  }

  TypeDemoComponentBase ::
    ~TypeDemoComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_cmdIn_InputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_cmdRegOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdRegOut_OutputPort));
  }

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_cmdResponseOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdResponseOut_OutputPort));
  }

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_logOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_logOut_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_logTextOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_logTextOut_OutputPort));
  }

#endif

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_prmGetOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_prmGetOut_OutputPort));
  }

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_prmSetOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_prmSetOut_OutputPort));
  }

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_timeCaller_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  NATIVE_INT_TYPE TypeDemoComponentBase ::
    getNum_tlmOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_tlmOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool TypeDemoComponentBase ::
    isConnected_cmdRegOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdRegOut_OutputPort[portNum].isConnected();
  }

  bool TypeDemoComponentBase ::
    isConnected_cmdResponseOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdResponseOut_OutputPort[portNum].isConnected();
  }

  bool TypeDemoComponentBase ::
    isConnected_logOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_logOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logOut_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool TypeDemoComponentBase ::
    isConnected_logTextOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_logTextOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logTextOut_OutputPort[portNum].isConnected();
  }

#endif

  bool TypeDemoComponentBase ::
    isConnected_prmGetOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmGetOut_OutputPort[portNum].isConnected();
  }

  bool TypeDemoComponentBase ::
    isConnected_prmSetOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmSetOut_OutputPort[portNum].isConnected();
  }

  bool TypeDemoComponentBase ::
    isConnected_timeCaller_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  bool TypeDemoComponentBase ::
    isConnected_tlmOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_tlmOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_tlmOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Command response
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdResponse response
    )
  {
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
  }

  // ----------------------------------------------------------------------
  // Command handler base-class functions
  //
  // Call these functions directly to bypass the command input port
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    CHOICE_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    Ref::Choice choice;
    _status = args.deserialize(choice);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->CHOICE_cmdHandler(
      opCode, cmdSeq,
      choice
    );
  }

  void TypeDemoComponentBase ::
    CHOICES_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    Ref::ManyChoices choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->CHOICES_cmdHandler(
      opCode, cmdSeq,
      choices
    );
  }

  void TypeDemoComponentBase ::
    CHOICES_WITH_FRIENDS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    U8 repeat;
    _status = args.deserialize(repeat);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    Ref::ManyChoices choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    U8 repeat_max;
    _status = args.deserialize(repeat_max);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->CHOICES_WITH_FRIENDS_cmdHandler(
      opCode, cmdSeq,
      repeat,
      choices,
      repeat_max
    );
  }

  void TypeDemoComponentBase ::
    EXTRA_CHOICES_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    Ref::TooManyChoices choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->EXTRA_CHOICES_cmdHandler(
      opCode, cmdSeq,
      choices
    );
  }

  void TypeDemoComponentBase ::
    EXTRA_CHOICES_WITH_FRIENDS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    U8 repeat;
    _status = args.deserialize(repeat);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    Ref::TooManyChoices choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    U8 repeat_max;
    _status = args.deserialize(repeat_max);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->EXTRA_CHOICES_WITH_FRIENDS_cmdHandler(
      opCode, cmdSeq,
      repeat,
      choices,
      repeat_max
    );
  }

  void TypeDemoComponentBase ::
    CHOICE_PAIR_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    Ref::ChoicePair choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->CHOICE_PAIR_cmdHandler(
      opCode, cmdSeq,
      choices
    );
  }

  void TypeDemoComponentBase ::
    CHOICE_PAIR_WITH_FRIENDS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    U8 repeat;
    _status = args.deserialize(repeat);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    Ref::ChoicePair choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    U8 repeat_max;
    _status = args.deserialize(repeat_max);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->CHOICE_PAIR_WITH_FRIENDS_cmdHandler(
      opCode, cmdSeq,
      repeat,
      choices,
      repeat_max
    );
  }

  void TypeDemoComponentBase ::
    GLUTTON_OF_CHOICE_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    Ref::ChoiceSlurry choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->GLUTTON_OF_CHOICE_cmdHandler(
      opCode, cmdSeq,
      choices
    );
  }

  void TypeDemoComponentBase ::
    GLUTTON_OF_CHOICE_WITH_FRIENDS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    U8 repeat;
    _status = args.deserialize(repeat);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    Ref::ChoiceSlurry choices;
    _status = args.deserialize(choices);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    U8 repeat_max;
    _status = args.deserialize(repeat_max);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->GLUTTON_OF_CHOICE_WITH_FRIENDS_cmdHandler(
      opCode, cmdSeq,
      repeat,
      choices,
      repeat_max
    );
  }

  void TypeDemoComponentBase ::
    DUMP_TYPED_PARAMETERS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->DUMP_TYPED_PARAMETERS_cmdHandler(opCode, cmdSeq);
  }

  void TypeDemoComponentBase ::
    DUMP_FLOATS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->DUMP_FLOATS_cmdHandler(opCode, cmdSeq);
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoiceEv(Ref::Choice choice)
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICEEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::Choice::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choice);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Choice: %s";
#else
      const char* _formatString =
        "%s: Choice: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choiceStr;
      choice.toString(choiceStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoiceEv ",
        choiceStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoicesEv(Ref::ManyChoices choices)
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICESEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::ManyChoices::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Choices: %s";
#else
      const char* _formatString =
        "%s: Choices: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoicesEv ",
        choicesStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ExtraChoicesEv(Ref::TooManyChoices choices)
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_EXTRACHOICESEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::TooManyChoices::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Choices: %s";
#else
      const char* _formatString =
        "%s: Choices: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ExtraChoicesEv ",
        choicesStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoicePairEv(Ref::ChoicePair choices)
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICEPAIREV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::ChoicePair::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Choices: %s";
#else
      const char* _formatString =
        "%s: Choices: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoicePairEv ",
        choicesStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoiceSlurryEv(Ref::ChoiceSlurry choices)
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICESLURRYEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::ChoiceSlurry::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Choices: %s";
#else
      const char* _formatString =
        "%s: Choices: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoiceSlurryEv ",
        choicesStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoicePrmEv(
        Ref::Choice choice,
        Fw::ParamValid validity
    )
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICEPRMEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::Choice::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choice);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Fw::ParamValid::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(validity);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: CHOICE_PRM: %s with validity: %s";
#else
      const char* _formatString =
        "%s: CHOICE_PRM: %s with validity: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choiceStr;
      choice.toString(choiceStr);
      Fw::String validityStr;
      validity.toString(validityStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoicePrmEv ",
        choiceStr.toChar(),
        validityStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoicesPrmEv(
        Ref::ManyChoices choices,
        Fw::ParamValid validity
    )
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICESPRMEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::ManyChoices::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Fw::ParamValid::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(validity);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: CHOICES_PRM: %s with validity: %s";
#else
      const char* _formatString =
        "%s: CHOICES_PRM: %s with validity: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);
      Fw::String validityStr;
      validity.toString(validityStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoicesPrmEv ",
        choicesStr.toChar(),
        validityStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ExtraChoicesPrmEv(
        Ref::TooManyChoices choices,
        Fw::ParamValid validity
    )
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_EXTRACHOICESPRMEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::TooManyChoices::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Fw::ParamValid::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(validity);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: EXTRA_CHOICES_PRM: %s with validity: %s";
#else
      const char* _formatString =
        "%s: EXTRA_CHOICES_PRM: %s with validity: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);
      Fw::String validityStr;
      validity.toString(validityStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ExtraChoicesPrmEv ",
        choicesStr.toChar(),
        validityStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoicePairPrmEv(
        Ref::ChoicePair choices,
        Fw::ParamValid validity
    )
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICEPAIRPRMEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::ChoicePair::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Fw::ParamValid::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(validity);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: CHOICE_PAIR_PRM: %s with validity: %s";
#else
      const char* _formatString =
        "%s: CHOICE_PAIR_PRM: %s with validity: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);
      Fw::String validityStr;
      validity.toString(validityStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoicePairPrmEv ",
        choicesStr.toChar(),
        validityStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_ChoiceSlurryPrmEv(
        Ref::ChoiceSlurry choices,
        Fw::ParamValid validity
    )
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_CHOICESLURRYPRMEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::ChoiceSlurry::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(choices);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Fw::ParamValid::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(validity);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: GLUTTON_OF_CHOICE_PRM: %s with validity: %s";
#else
      const char* _formatString =
        "%s: GLUTTON_OF_CHOICE_PRM: %s with validity: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String choicesStr;
      choices.toString(choicesStr);
      Fw::String validityStr;
      validity.toString(validityStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "ChoiceSlurryPrmEv ",
        choicesStr.toChar(),
        validityStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void TypeDemoComponentBase ::
    log_ACTIVITY_HI_FloatEv(
        F32 float1,
        F32 float2,
        F32 float3,
        Ref::FloatSet floats
    )
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_FLOATEV;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(4));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(sizeof(F32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(float1);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(sizeof(F32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(float2);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(sizeof(F32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(float3);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
        static_cast<U8>(Ref::FloatSet::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serialize(floats);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Floats: %f %f %f as a set: %s";
#else
      const char* _formatString =
        "%s: Floats: %f %f %f as a set: %s";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

      Fw::String floatsStr;
      floats.toString(floatsStr);

      (void) snprintf(
        _textBuffer,
        FW_LOG_TEXT_BUFFER_SIZE,
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName,
#endif
        "FloatEv ",
        float1,
        float2,
        float3,
        floatsStr.toChar()
      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    tlmWrite_ChoiceCh(
        const Ref::Choice& arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_CHOICECH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_ChoicesCh(
        const Ref::ManyChoices& arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_CHOICESCH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_ExtraChoicesCh(
        const Ref::TooManyChoices& arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_EXTRACHOICESCH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_ChoicePairCh(
        const Ref::ChoicePair& arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_CHOICEPAIRCH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_ChoiceSlurryCh(
        const Ref::ChoiceSlurry& arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_CHOICESLURRYCH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_Float1Ch(
        F32 arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_FLOAT1CH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_Float2Ch(
        F32 arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_FLOAT2CH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_Float3Ch(
        F32 arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_FLOAT3CH;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void TypeDemoComponentBase ::
    tlmWrite_FloatSet(
        const Ref::FloatSet& arg,
        Fw::Time _tlmTime
    )
  {
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
      if (
        this->m_timeCaller_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_FLOATSET;

      this->m_tlmOut_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  // ----------------------------------------------------------------------
  // Parameter update hook
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    parameterUpdated(FwPrmIdType id)
  {
    // Do nothing by default
  }

  void TypeDemoComponentBase ::
    parametersLoaded()
  {
    // Do nothing by default
  }

  // ----------------------------------------------------------------------
  // Parameter get functions
  // ----------------------------------------------------------------------

  Ref::Choice TypeDemoComponentBase ::
    paramGet_CHOICE_PRM(Fw::ParamValid& valid)
  {
    Ref::Choice _local;
    this->m_paramLock.lock();
    valid = this->m_param_CHOICE_PRM_valid;
    _local = this->m_CHOICE_PRM;
    this->m_paramLock.unLock();
    return _local;
  }

  Ref::ManyChoices TypeDemoComponentBase ::
    paramGet_CHOICES_PRM(Fw::ParamValid& valid)
  {
    Ref::ManyChoices _local;
    this->m_paramLock.lock();
    valid = this->m_param_CHOICES_PRM_valid;
    _local = this->m_CHOICES_PRM;
    this->m_paramLock.unLock();
    return _local;
  }

  Ref::ManyChoices TypeDemoComponentBase ::
    paramGet_EXTRA_CHOICES_PRM(Fw::ParamValid& valid)
  {
    Ref::ManyChoices _local;
    this->m_paramLock.lock();
    valid = this->m_param_EXTRA_CHOICES_PRM_valid;
    _local = this->m_EXTRA_CHOICES_PRM;
    this->m_paramLock.unLock();
    return _local;
  }

  Ref::ChoicePair TypeDemoComponentBase ::
    paramGet_CHOICE_PAIR_PRM(Fw::ParamValid& valid)
  {
    Ref::ChoicePair _local;
    this->m_paramLock.lock();
    valid = this->m_param_CHOICE_PAIR_PRM_valid;
    _local = this->m_CHOICE_PAIR_PRM;
    this->m_paramLock.unLock();
    return _local;
  }

  Ref::ChoiceSlurry TypeDemoComponentBase ::
    paramGet_GLUTTON_OF_CHOICE_PRM(Fw::ParamValid& valid)
  {
    Ref::ChoiceSlurry _local;
    this->m_paramLock.lock();
    valid = this->m_param_GLUTTON_OF_CHOICE_PRM_valid;
    _local = this->m_GLUTTON_OF_CHOICE_PRM;
    this->m_paramLock.unLock();
    return _local;
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time TypeDemoComponentBase ::
    getTime()
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void TypeDemoComponentBase ::
    m_p_cmdIn_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);
    TypeDemoComponentBase* compPtr = static_cast<TypeDemoComponentBase*>(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, opCode, idBase);

    // Select base class function based on opcode
    switch (opCode - idBase) {
      case OPCODE_CHOICE: {
        compPtr->CHOICE_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_CHOICE_PRM_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_CHOICE_PRM(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_CHOICE_PRM_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_CHOICE_PRM();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_CHOICES: {
        compPtr->CHOICES_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_CHOICES_WITH_FRIENDS: {
        compPtr->CHOICES_WITH_FRIENDS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_CHOICES_PRM_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_CHOICES_PRM(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_CHOICES_PRM_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_CHOICES_PRM();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_EXTRA_CHOICES: {
        compPtr->EXTRA_CHOICES_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_EXTRA_CHOICES_WITH_FRIENDS: {
        compPtr->EXTRA_CHOICES_WITH_FRIENDS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_EXTRA_CHOICES_PRM_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_EXTRA_CHOICES_PRM(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_EXTRA_CHOICES_PRM_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_EXTRA_CHOICES_PRM();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_CHOICE_PAIR: {
        compPtr->CHOICE_PAIR_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_CHOICE_PAIR_WITH_FRIENDS: {
        compPtr->CHOICE_PAIR_WITH_FRIENDS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_CHOICE_PAIR_PRM_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_CHOICE_PAIR_PRM(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_CHOICE_PAIR_PRM_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_CHOICE_PAIR_PRM();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_GLUTTON_OF_CHOICE: {
        compPtr->GLUTTON_OF_CHOICE_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_GLUTTON_OF_CHOICE_WITH_FRIENDS: {
        compPtr->GLUTTON_OF_CHOICE_WITH_FRIENDS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_GLUTTON_OF_CHOICE_PRM_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_GLUTTON_OF_CHOICE_PRM(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_GLUTTON_OF_CHOICE_PRM_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_GLUTTON_OF_CHOICE_PRM();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_DUMP_TYPED_PARAMETERS: {
        compPtr->DUMP_TYPED_PARAMETERS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_DUMP_FLOATS: {
        compPtr->DUMP_FLOATS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }
    }
  }

  // ----------------------------------------------------------------------
  // Parameter set functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSet_CHOICE_PRM(Fw::SerializeBufferBase& val)
  {
    Ref::Choice _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_CHOICE_PRM = _local_val;
    this->m_param_CHOICE_PRM_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_CHOICE_PRM);
    return Fw::CmdResponse::OK;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSet_CHOICES_PRM(Fw::SerializeBufferBase& val)
  {
    Ref::ManyChoices _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_CHOICES_PRM = _local_val;
    this->m_param_CHOICES_PRM_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_CHOICES_PRM);
    return Fw::CmdResponse::OK;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSet_EXTRA_CHOICES_PRM(Fw::SerializeBufferBase& val)
  {
    Ref::ManyChoices _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_EXTRA_CHOICES_PRM = _local_val;
    this->m_param_EXTRA_CHOICES_PRM_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_EXTRA_CHOICES_PRM);
    return Fw::CmdResponse::OK;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSet_CHOICE_PAIR_PRM(Fw::SerializeBufferBase& val)
  {
    Ref::ChoicePair _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_CHOICE_PAIR_PRM = _local_val;
    this->m_param_CHOICE_PAIR_PRM_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_CHOICE_PAIR_PRM);
    return Fw::CmdResponse::OK;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSet_GLUTTON_OF_CHOICE_PRM(Fw::SerializeBufferBase& val)
  {
    Ref::ChoiceSlurry _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_GLUTTON_OF_CHOICE_PRM = _local_val;
    this->m_param_GLUTTON_OF_CHOICE_PRM_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_GLUTTON_OF_CHOICE_PRM);
    return Fw::CmdResponse::OK;
  }

  // ----------------------------------------------------------------------
  // Parameter save functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSave_CHOICE_PRM()
  {
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

      Fw::SerializeStatus stat = saveBuff.serialize(m_CHOICE_PRM);

      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_CHOICE_PRM;

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSave_CHOICES_PRM()
  {
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

      Fw::SerializeStatus stat = saveBuff.serialize(m_CHOICES_PRM);

      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_CHOICES_PRM;

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSave_EXTRA_CHOICES_PRM()
  {
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

      Fw::SerializeStatus stat = saveBuff.serialize(m_EXTRA_CHOICES_PRM);

      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_EXTRA_CHOICES_PRM;

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSave_CHOICE_PAIR_PRM()
  {
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

      Fw::SerializeStatus stat = saveBuff.serialize(m_CHOICE_PAIR_PRM);

      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_CHOICE_PAIR_PRM;

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

  Fw::CmdResponse TypeDemoComponentBase ::
    paramSave_GLUTTON_OF_CHOICE_PRM()
  {
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

      Fw::SerializeStatus stat = saveBuff.serialize(m_GLUTTON_OF_CHOICE_PRM);

      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_GLUTTON_OF_CHOICE_PRM;

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

}

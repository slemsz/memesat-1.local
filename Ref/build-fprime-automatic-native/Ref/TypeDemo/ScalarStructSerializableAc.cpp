// ======================================================================
// \title  ScalarStructSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ScalarStruct struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"
#include "Ref/TypeDemo/ScalarStructSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ScalarStruct ::
    ScalarStruct() :
      Serializable(),
      i8(0),
      i16(0),
      i32(0),
      i64(0),
      u8(0),
      u16(0),
      u32(0),
      u64(0),
      f32(0.0f),
      f64(0.0)
  {

  }

  ScalarStruct ::
    ScalarStruct(
        I8 i8,
        I16 i16,
        I32 i32,
        I64 i64,
        U8 u8,
        U16 u16,
        U32 u32,
        U64 u64,
        F32 f32,
        F64 f64
    ) :
      Serializable(),
      i8(i8),
      i16(i16),
      i32(i32),
      i64(i64),
      u8(u8),
      u16(u16),
      u32(u32),
      u64(u64),
      f32(f32),
      f64(f64)
  {

  }

  ScalarStruct ::
    ScalarStruct(const ScalarStruct& obj) :
      Serializable(),
      i8(obj.i8),
      i16(obj.i16),
      i32(obj.i32),
      i64(obj.i64),
      u8(obj.u8),
      u16(obj.u16),
      u32(obj.u32),
      u64(obj.u64),
      f32(obj.f32),
      f64(obj.f64)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  ScalarStruct& ScalarStruct ::
    operator=(const ScalarStruct& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.i8, obj.i16, obj.i32, obj.i64, obj.u8, obj.u16, obj.u32, obj.u64, obj.f32, obj.f64);
    return *this;
  }

  bool ScalarStruct ::
    operator==(const ScalarStruct& obj) const
  {
    return (
      (this->i8 == obj.i8) &&
      (this->i16 == obj.i16) &&
      (this->i32 == obj.i32) &&
      (this->i64 == obj.i64) &&
      (this->u8 == obj.u8) &&
      (this->u16 == obj.u16) &&
      (this->u32 == obj.u32) &&
      (this->u64 == obj.u64) &&
      (this->f32 == obj.f32) &&
      (this->f64 == obj.f64)
    );
  }

  bool ScalarStruct ::
    operator!=(const ScalarStruct& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const ScalarStruct& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus ScalarStruct ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->i8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->i16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->i32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->i64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->u8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->u16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->u32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->u64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->f32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->f64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus ScalarStruct ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->i8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->i16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->i32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->i64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->u8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->u16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->u32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->u64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->f32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->f64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING

  void ScalarStruct ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "i8 = %" PRIi8 ", "
      "i16 = %" PRIi16 ", "
      "i32 = %" PRIi32 ", "
      "i64 = %" PRIi64 ", "
      "u8 = %" PRIu8 ", "
      "u16 = %" PRIu16 ", "
      "u32 = %" PRIu32 ", "
      "u64 = %" PRIu64 ", "
      "f32 = %f, "
      "f64 = %f"
      " )";

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      this->i8,
      this->i16,
      this->i32,
      this->i64,
      this->u8,
      this->u16,
      this->u32,
      this->u64,
      this->f32,
      this->f64
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void ScalarStruct ::
    set(
        I8 i8,
        I16 i16,
        I32 i32,
        I64 i64,
        U8 u8,
        U16 u16,
        U32 u32,
        U64 u64,
        F32 f32,
        F64 f64
    )
  {
    this->i8 = i8;
    this->i16 = i16;
    this->i32 = i32;
    this->i64 = i64;
    this->u8 = u8;
    this->u16 = u16;
    this->u32 = u32;
    this->u64 = u64;
    this->f32 = f32;
    this->f64 = f64;
  }

  void ScalarStruct ::
    seti8(I8 i8)
  {
    this->i8 = i8;
  }

  void ScalarStruct ::
    seti16(I16 i16)
  {
    this->i16 = i16;
  }

  void ScalarStruct ::
    seti32(I32 i32)
  {
    this->i32 = i32;
  }

  void ScalarStruct ::
    seti64(I64 i64)
  {
    this->i64 = i64;
  }

  void ScalarStruct ::
    setu8(U8 u8)
  {
    this->u8 = u8;
  }

  void ScalarStruct ::
    setu16(U16 u16)
  {
    this->u16 = u16;
  }

  void ScalarStruct ::
    setu32(U32 u32)
  {
    this->u32 = u32;
  }

  void ScalarStruct ::
    setu64(U64 u64)
  {
    this->u64 = u64;
  }

  void ScalarStruct ::
    setf32(F32 f32)
  {
    this->f32 = f32;
  }

  void ScalarStruct ::
    setf64(F64 f64)
  {
    this->f64 = f64;
  }

}

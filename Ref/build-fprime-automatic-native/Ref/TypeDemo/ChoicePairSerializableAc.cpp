// ======================================================================
// \title  ChoicePairSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ChoicePair struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"
#include "Ref/TypeDemo/ChoicePairSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ChoicePair ::
    ChoicePair() :
      Serializable(),
      firstChoice(Ref::Choice::ONE),
      secondChoice(Ref::Choice::ONE)
  {

  }

  ChoicePair ::
    ChoicePair(
        Ref::Choice::T firstChoice,
        Ref::Choice::T secondChoice
    ) :
      Serializable(),
      firstChoice(firstChoice),
      secondChoice(secondChoice)
  {

  }

  ChoicePair ::
    ChoicePair(const ChoicePair& obj) :
      Serializable(),
      firstChoice(obj.firstChoice),
      secondChoice(obj.secondChoice)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  ChoicePair& ChoicePair ::
    operator=(const ChoicePair& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.firstChoice, obj.secondChoice);
    return *this;
  }

  bool ChoicePair ::
    operator==(const ChoicePair& obj) const
  {
    return (
      (this->firstChoice == obj.firstChoice) &&
      (this->secondChoice == obj.secondChoice)
    );
  }

  bool ChoicePair ::
    operator!=(const ChoicePair& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const ChoicePair& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus ChoicePair ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->firstChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->secondChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus ChoicePair ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->firstChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->secondChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING

  void ChoicePair ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "firstChoice = %s, "
      "secondChoice = %s"
      " )";

    // Declare strings to hold any serializable toString() arguments
    Fw::String firstChoiceStr;
    Fw::String secondChoiceStr;

    // Call toString for arrays and serializable types
    this->firstChoice.toString(firstChoiceStr);
    this->secondChoice.toString(secondChoiceStr);

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      firstChoiceStr.toChar(),
      secondChoiceStr.toChar()
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void ChoicePair ::
    set(
        Ref::Choice::T firstChoice,
        Ref::Choice::T secondChoice
    )
  {
    this->firstChoice = firstChoice;
    this->secondChoice = secondChoice;
  }

  void ChoicePair ::
    setfirstChoice(Ref::Choice::T firstChoice)
  {
    this->firstChoice = firstChoice;
  }

  void ChoicePair ::
    setsecondChoice(Ref::Choice::T secondChoice)
  {
    this->secondChoice = secondChoice;
  }

}

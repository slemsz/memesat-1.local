// ======================================================================
// \title  SignalPairSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SignalPair struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"
#include "Ref/SignalGen/SignalPairSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  SignalPair ::
    SignalPair() :
      Serializable(),
      time(0.0f),
      value(0.0f)
  {

  }

  SignalPair ::
    SignalPair(
        F32 time,
        F32 value
    ) :
      Serializable(),
      time(time),
      value(value)
  {

  }

  SignalPair ::
    SignalPair(const SignalPair& obj) :
      Serializable(),
      time(obj.time),
      value(obj.value)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  SignalPair& SignalPair ::
    operator=(const SignalPair& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.time, obj.value);
    return *this;
  }

  bool SignalPair ::
    operator==(const SignalPair& obj) const
  {
    return (
      (this->time == obj.time) &&
      (this->value == obj.value)
    );
  }

  bool SignalPair ::
    operator!=(const SignalPair& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const SignalPair& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus SignalPair ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->time);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus SignalPair ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->time);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

  void SignalPair ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "time = %f, "
      "value = %f"
      " )";

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      this->time,
      this->value
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void SignalPair ::
    set(
        F32 time,
        F32 value
    )
  {
    this->time = time;
    this->value = value;
  }

  void SignalPair ::
    settime(F32 time)
  {
    this->time = time;
  }

  void SignalPair ::
    setvalue(F32 value)
  {
    this->value = value;
  }

}

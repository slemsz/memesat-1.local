// ======================================================================
// \title  ChoicePairSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ChoicePair struct
// ======================================================================

#ifndef Ref_ChoicePairSerializableAc_HPP
#define Ref_ChoicePairSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Ref/TypeDemo/ChoiceEnumAc.hpp"

namespace Ref {

  //! Structure of enums
  class ChoicePair :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          Ref::Choice::SERIALIZED_SIZE +
          Ref::Choice::SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      ChoicePair();

      //! Member constructor
      ChoicePair(
          Ref::Choice::T firstChoice,
          Ref::Choice::T secondChoice
      );

      //! Copy constructor
      ChoicePair(
          const ChoicePair& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      ChoicePair& operator=(
          const ChoicePair& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const ChoicePair& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const ChoicePair& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const ChoicePair& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member firstChoice
      Ref::Choice::T getfirstChoice() const
      {
        return this->firstChoice.e;
      }

      //! Get member secondChoice
      Ref::Choice::T getsecondChoice() const
      {
        return this->secondChoice.e;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          Ref::Choice::T firstChoice,
          Ref::Choice::T secondChoice
      );

      //! Set member firstChoice
      void setfirstChoice(Ref::Choice::T firstChoice);

      //! Set member secondChoice
      void setsecondChoice(Ref::Choice::T secondChoice);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      Ref::Choice firstChoice;
      Ref::Choice secondChoice;

  };

}

#endif

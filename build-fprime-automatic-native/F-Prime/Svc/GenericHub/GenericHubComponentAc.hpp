// ======================================================================
// \title  GenericHubComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for GenericHub component base class
// ======================================================================

#ifndef Svc_GenericHubComponentAc_HPP
#define Svc_GenericHubComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Buffer/BufferGetPortAc.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"

static_assert(
  FW_PORT_SERIALIZATION == 1,
  "GenericHub component requires serialization"
);

namespace Svc {

  //! \class GenericHubComponentBase
  //! \brief Auto-generated base for GenericHub component
  //!
  //! A generic hub component
  class GenericHubComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class GenericHubComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_LOGRECV_INPUT_PORTS = 1,
        NUM_TLMRECV_INPUT_PORTS = 1,
        NUM_BUFFERSIN_INPUT_PORTS = 10,
        NUM_DATAIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of serial input ports
      enum {
        NUM_PORTIN_INPUT_PORTS = 10,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_LOGSEND_OUTPUT_PORTS = 1,
        NUM_TLMSEND_OUTPUT_PORTS = 1,
        NUM_BUFFERDEALLOCATE_OUTPUT_PORTS = 1,
        NUM_BUFFERSOUT_OUTPUT_PORTS = 10,
        NUM_DATAINDEALLOCATE_OUTPUT_PORTS = 1,
        NUM_DATAOUT_OUTPUT_PORTS = 1,
        NUM_DATAOUTALLOCATE_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of serial output ports
      enum {
        NUM_PORTOUT_OUTPUT_PORTS = 10,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize GenericHubComponentBase object
      void init(
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return LogRecv[portNum]
      Fw::InputLogPort* get_LogRecv_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return TlmRecv[portNum]
      Fw::InputTlmPort* get_TlmRecv_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return buffersIn[portNum]
      Fw::InputBufferSendPort* get_buffersIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return dataIn[portNum]
      Fw::InputBufferSendPort* get_dataIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for serial input ports
      // ----------------------------------------------------------------------

      //! Get serial input port at index
      //!
      //! \return portIn[portNum]
      Fw::InputSerializePort* get_portIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to LogSend[portNum]
      void set_LogSend_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

      //! Connect port to TlmSend[portNum]
      void set_TlmSend_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

      //! Connect port to bufferDeallocate[portNum]
      void set_bufferDeallocate_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to buffersOut[portNum]
      void set_buffersOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to dataInDeallocate[portNum]
      void set_dataInDeallocate_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to dataOut[portNum]
      void set_dataOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to dataOutAllocate[portNum]
      void set_dataOutAllocate_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputBufferGetPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to LogSend[portNum]
      void set_LogSend_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to TlmSend[portNum]
      void set_TlmSend_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to bufferDeallocate[portNum]
      void set_bufferDeallocate_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to buffersOut[portNum]
      void set_buffersOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dataInDeallocate[portNum]
      void set_dataInDeallocate_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dataOut[portNum]
      void set_dataOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to serial output ports
      // ----------------------------------------------------------------------

      //! Connect port to portOut[portNum]
      void set_portOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputPortBase* port //!< The port
      );

#endif

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct GenericHubComponentBase object
      GenericHubComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy GenericHubComponentBase object
      virtual ~GenericHubComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of LogRecv input ports
      //!
      //! \return The number of LogRecv input ports
      NATIVE_INT_TYPE getNum_LogRecv_InputPorts() const;

      //! Get the number of TlmRecv input ports
      //!
      //! \return The number of TlmRecv input ports
      NATIVE_INT_TYPE getNum_TlmRecv_InputPorts() const;

      //! Get the number of buffersIn input ports
      //!
      //! \return The number of buffersIn input ports
      NATIVE_INT_TYPE getNum_buffersIn_InputPorts() const;

      //! Get the number of dataIn input ports
      //!
      //! \return The number of dataIn input ports
      NATIVE_INT_TYPE getNum_dataIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of serial input ports
      // ----------------------------------------------------------------------

      //! Get the number of portIn input ports
      //!
      //! \return The number of portIn input ports
      NATIVE_INT_TYPE getNum_portIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of LogSend output ports
      //!
      //! \return The number of LogSend output ports
      NATIVE_INT_TYPE getNum_LogSend_OutputPorts() const;

      //! Get the number of TlmSend output ports
      //!
      //! \return The number of TlmSend output ports
      NATIVE_INT_TYPE getNum_TlmSend_OutputPorts() const;

      //! Get the number of bufferDeallocate output ports
      //!
      //! \return The number of bufferDeallocate output ports
      NATIVE_INT_TYPE getNum_bufferDeallocate_OutputPorts() const;

      //! Get the number of buffersOut output ports
      //!
      //! \return The number of buffersOut output ports
      NATIVE_INT_TYPE getNum_buffersOut_OutputPorts() const;

      //! Get the number of dataInDeallocate output ports
      //!
      //! \return The number of dataInDeallocate output ports
      NATIVE_INT_TYPE getNum_dataInDeallocate_OutputPorts() const;

      //! Get the number of dataOut output ports
      //!
      //! \return The number of dataOut output ports
      NATIVE_INT_TYPE getNum_dataOut_OutputPorts() const;

      //! Get the number of dataOutAllocate output ports
      //!
      //! \return The number of dataOutAllocate output ports
      NATIVE_INT_TYPE getNum_dataOutAllocate_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of serial output ports
      // ----------------------------------------------------------------------

      //! Get the number of portOut output ports
      //!
      //! \return The number of portOut output ports
      NATIVE_INT_TYPE getNum_portOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port LogSend is connected
      //!
      //! \return Whether port LogSend is connected
      bool isConnected_LogSend_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port TlmSend is connected
      //!
      //! \return Whether port TlmSend is connected
      bool isConnected_TlmSend_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port bufferDeallocate is connected
      //!
      //! \return Whether port bufferDeallocate is connected
      bool isConnected_bufferDeallocate_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port buffersOut is connected
      //!
      //! \return Whether port buffersOut is connected
      bool isConnected_buffersOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port dataInDeallocate is connected
      //!
      //! \return Whether port dataInDeallocate is connected
      bool isConnected_dataInDeallocate_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port dataOut is connected
      //!
      //! \return Whether port dataOut is connected
      bool isConnected_dataOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

      //! Check whether port dataOutAllocate is connected
      //!
      //! \return Whether port dataOutAllocate is connected
      bool isConnected_dataOutAllocate_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for serial output ports
      // ----------------------------------------------------------------------

      //! Check whether port portOut is connected
      //!
      //! \return Whether port portOut is connected
      bool isConnected_portOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port LogRecv
      virtual void LogRecv_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::LogBuffer& args //!< Buffer containing serialized log entry
      ) = 0;

      //! Handler for input port TlmRecv
      virtual void TlmRecv_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      ) = 0;

      //! Handler for input port buffersIn
      virtual void buffersIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      ) = 0;

      //! Handler for input port dataIn
      virtual void dataIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port LogRecv
      void LogRecv_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::LogBuffer& args //!< Buffer containing serialized log entry
      );

      //! Handler base-class function for input port TlmRecv
      void TlmRecv_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      );

      //! Handler base-class function for input port buffersIn
      void buffersIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

      //! Handler base-class function for input port dataIn
      void dataIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for serial input ports
      // ----------------------------------------------------------------------

      //! Handler for input port portIn
      virtual void portIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& buffer //!< The serialization buffer
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for serial input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port portIn
      void portIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& buffer //!< The serialization buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port LogSend
      void LogSend_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::LogBuffer& args //!< Buffer containing serialized log entry
      );

      //! Invoke output port TlmSend
      void TlmSend_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      );

      //! Invoke output port bufferDeallocate
      void bufferDeallocate_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

      //! Invoke output port buffersOut
      void buffersOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

      //! Invoke output port dataInDeallocate
      void dataInDeallocate_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

      //! Invoke output port dataOut
      void dataOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

      //! Invoke output port dataOutAllocate
      Fw::Buffer dataOutAllocate_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          U32 size
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for serial output ports
      // ----------------------------------------------------------------------

      //! Invoke output port portOut
      Fw::SerializeStatus portOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& buffer //!< The serialization buffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port LogRecv
      static void m_p_LogRecv_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::LogBuffer& args //!< Buffer containing serialized log entry
      );

      //! Callback for port TlmRecv
      static void m_p_TlmRecv_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      );

      //! Callback for port buffersIn
      static void m_p_buffersIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

      //! Callback for port dataIn
      static void m_p_dataIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::Buffer& fwBuffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on serial input ports
      // ----------------------------------------------------------------------

#if FW_PORT_SERIALIZATION

      //! Callback for port portIn
      static void m_p_portIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& buffer //!< The serialization buffer
      );

#endif

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port LogRecv
      Fw::InputLogPort m_LogRecv_InputPort[NUM_LOGRECV_INPUT_PORTS];

      //! Input port TlmRecv
      Fw::InputTlmPort m_TlmRecv_InputPort[NUM_TLMRECV_INPUT_PORTS];

      //! Input port buffersIn
      Fw::InputBufferSendPort m_buffersIn_InputPort[NUM_BUFFERSIN_INPUT_PORTS];

      //! Input port dataIn
      Fw::InputBufferSendPort m_dataIn_InputPort[NUM_DATAIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Serial input ports
      // ----------------------------------------------------------------------

      //! Input port portIn
      Fw::InputSerializePort m_portIn_InputPort[NUM_PORTIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port LogSend
      Fw::OutputLogPort m_LogSend_OutputPort[NUM_LOGSEND_OUTPUT_PORTS];

      //! Output port TlmSend
      Fw::OutputTlmPort m_TlmSend_OutputPort[NUM_TLMSEND_OUTPUT_PORTS];

      //! Output port bufferDeallocate
      Fw::OutputBufferSendPort m_bufferDeallocate_OutputPort[NUM_BUFFERDEALLOCATE_OUTPUT_PORTS];

      //! Output port buffersOut
      Fw::OutputBufferSendPort m_buffersOut_OutputPort[NUM_BUFFERSOUT_OUTPUT_PORTS];

      //! Output port dataInDeallocate
      Fw::OutputBufferSendPort m_dataInDeallocate_OutputPort[NUM_DATAINDEALLOCATE_OUTPUT_PORTS];

      //! Output port dataOut
      Fw::OutputBufferSendPort m_dataOut_OutputPort[NUM_DATAOUT_OUTPUT_PORTS];

      //! Output port dataOutAllocate
      Fw::OutputBufferGetPort m_dataOutAllocate_OutputPort[NUM_DATAOUTALLOCATE_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Serial output ports
      // ----------------------------------------------------------------------

      //! Output port portOut
      Fw::OutputSerializePort m_portOut_OutputPort[NUM_PORTOUT_OUTPUT_PORTS];

  };

}

#endif

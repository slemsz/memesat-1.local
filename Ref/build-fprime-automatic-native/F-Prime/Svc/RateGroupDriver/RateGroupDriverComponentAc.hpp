// ======================================================================
// \title  RateGroupDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for RateGroupDriver component base class
// ======================================================================

#ifndef Svc_RateGroupDriverComponentAc_HPP
#define Svc_RateGroupDriverComponentAc_HPP

#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Svc/Cycle/CyclePortAc.hpp"

namespace Svc {

  //! \class RateGroupDriverComponentBase
  //! \brief Auto-generated base for RateGroupDriver component
  //!
  //! A rate group driver component with input and output cycle ports
  class RateGroupDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class RateGroupDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_CYCLEIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_CYCLEOUT_OUTPUT_PORTS = 3,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize RateGroupDriverComponentBase object
      void init(
          NATIVE_INT_TYPE instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return CycleIn[portNum]
      Svc::InputCyclePort* get_CycleIn_InputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to CycleOut[portNum]
      void set_CycleOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Svc::InputCyclePort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to CycleOut[portNum]
      void set_CycleOut_OutputPort(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct RateGroupDriverComponentBase object
      RateGroupDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy RateGroupDriverComponentBase object
      virtual ~RateGroupDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of CycleIn input ports
      //!
      //! \return The number of CycleIn input ports
      NATIVE_INT_TYPE getNum_CycleIn_InputPorts();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of CycleOut output ports
      //!
      //! \return The number of CycleOut output ports
      NATIVE_INT_TYPE getNum_CycleOut_OutputPorts();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port CycleOut is connected
      //!
      //! \return Whether port CycleOut is connected
      bool isConnected_CycleOut_OutputPort(
          NATIVE_INT_TYPE portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port CycleIn
      virtual void CycleIn_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          Svc::TimerVal& cycleStart //!< Cycle start timer value
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port CycleIn
      void CycleIn_handlerBase(
          NATIVE_INT_TYPE portNum, //!< The port number
          Svc::TimerVal& cycleStart //!< Cycle start timer value
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port CycleOut
      void CycleOut_out(
          NATIVE_INT_TYPE portNum, //!< The port number
          Svc::TimerVal& cycleStart //!< Cycle start timer value
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port CycleIn
      static void m_p_CycleIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          NATIVE_INT_TYPE portNum, //!< The port number
          Svc::TimerVal& cycleStart //!< Cycle start timer value
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port CycleIn
      Svc::InputCyclePort m_CycleIn_InputPort[NUM_CYCLEIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port CycleOut
      Svc::OutputCyclePort m_CycleOut_OutputPort[NUM_CYCLEOUT_OUTPUT_PORTS];

  };

}

#endif

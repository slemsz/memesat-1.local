// ======================================================================
// \title  PacketStatSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for PacketStat struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"
#include "Ref/RecvBuffApp/PacketStatSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  PacketStat ::
    PacketStat() :
      Serializable(),
      BuffRecv(0),
      BuffErr(0),
      PacketStatus(Ref::PacketRecvStatus::PACKET_STATE_NO_PACKETS)
  {

  }

  PacketStat ::
    PacketStat(
        U32 BuffRecv,
        U32 BuffErr,
        Ref::PacketRecvStatus::T PacketStatus
    ) :
      Serializable(),
      BuffRecv(BuffRecv),
      BuffErr(BuffErr),
      PacketStatus(PacketStatus)
  {

  }

  PacketStat ::
    PacketStat(const PacketStat& obj) :
      Serializable(),
      BuffRecv(obj.BuffRecv),
      BuffErr(obj.BuffErr),
      PacketStatus(obj.PacketStatus)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  PacketStat& PacketStat ::
    operator=(const PacketStat& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.BuffRecv, obj.BuffErr, obj.PacketStatus);
    return *this;
  }

  bool PacketStat ::
    operator==(const PacketStat& obj) const
  {
    return (
      (this->BuffRecv == obj.BuffRecv) &&
      (this->BuffErr == obj.BuffErr) &&
      (this->PacketStatus == obj.PacketStatus)
    );
  }

  bool PacketStat ::
    operator!=(const PacketStat& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const PacketStat& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus PacketStat ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->BuffRecv);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->BuffErr);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->PacketStatus);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus PacketStat ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->BuffRecv);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->BuffErr);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->PacketStatus);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

  void PacketStat ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "BuffRecv = %" PRIu32 ", "
      "BuffErr = %" PRIu32 ", "
      "PacketStatus = %s"
      " )";

    // Declare strings to hold any serializable toString() arguments
    Fw::String PacketStatusStr;

    // Call toString for arrays and serializable types
    this->PacketStatus.toString(PacketStatusStr);

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      this->BuffRecv,
      this->BuffErr,
      PacketStatusStr.toChar()
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void PacketStat ::
    set(
        U32 BuffRecv,
        U32 BuffErr,
        Ref::PacketRecvStatus::T PacketStatus
    )
  {
    this->BuffRecv = BuffRecv;
    this->BuffErr = BuffErr;
    this->PacketStatus = PacketStatus;
  }

  void PacketStat ::
    setBuffRecv(U32 BuffRecv)
  {
    this->BuffRecv = BuffRecv;
  }

  void PacketStat ::
    setBuffErr(U32 BuffErr)
  {
    this->BuffErr = BuffErr;
  }

  void PacketStat ::
    setPacketStatus(Ref::PacketRecvStatus::T PacketStatus)
  {
    this->PacketStatus = PacketStatus;
  }

}
